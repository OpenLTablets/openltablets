<project name="overallRelease" default="help" basedir=".">

	<description>
	    This script is designed to build all projects from base-pom in two ways:
		all projects are placed into single workspace and full SVN project structure.
	</description>

	<taskdef name="try" classname="ise.antelope.tasks.TryTask"/>
    <taskdef name="if" classname="ise.antelope.tasks.IfTask"/>

	<import file="changeVersionHG.xml"/>
	<!--<import file="release-mapping-module.xml"/>
	<import file="release-liveexcel-module.xml"/>-->

	<property file="OpenLRelease.properties"/>

	<!-- BEGIN M2 PRESET -->
 	<property name="maven.commoncmd" value="" />

    <condition property="maven.line" value="--offline ${maven.commoncmd}">
        <istrue value="${offline}" />
    </condition>
    <property name="maven.line" value="${maven.commoncmd}" />

    <condition property="maven.executable" value="mvn.bat">
        <os family="windows" />
    </condition>
    <property name="maven.executable" value="mvn" />

    <condition property="maven.executable.real" value="${m2.home}/bin/${maven.executable}">
        <isset property="m2.home" />
    </condition>
    <property name="maven.executable.real" value="${maven.executable}"/>

    <presetdef name="maven">
        <exec failonerror="true" executable="${maven.executable.real}">
            <arg line="${maven.line}" />
        </exec>
    </presetdef>
    <!-- END M2 PRESET -->
	
	<target name="commitModuleHG">
			<echo>${moduleFolder}</echo>
			<echo>${svnLogin}</echo>
			<echo>${svnPassword}</echo>
			<exec executable="hg">
				<arg line="commit ${moduleFolder}"/>
				<arg line="-m &quot;EPBDS Temporary changed versions for release.&quot;"/>
				<!--<arg line="-username ${svnLogin}"/>
				<arg line="-password ${svnPassword}"/>-->
			</exec>
		</target>

	<target name="changeVersionsBeforeHG">
        <antcall target="changeHG">
			<param name="projects_root" value="${moduleFolder}"/>
			<param name="previous_version" value="${current_version}"/>
			<param name="version" value="${release_version}"/>
			<param name="version_for_poms" value="${release_version}"/>
		</antcall>
		<antcall target="commitModuleHG"/>
	</target>
	
	<target name="releaseModule">
		<echo>Changing versions before the release</echo>
		<antcall target="changeVersionsBeforeHG"/>
		<echo>release:prepare</echo>		
		<maven dir="${moduleFolder}">
			<arg line="-B -X release:prepare -DautoVersionSubmodules=true -DdevelopmentVersion=${next_maven_version} -DscmCommentPrefix=EPBDS-345.[maven-release-plugin] -Dtag=release-${release_version}  -DreleaseVersion=${release_version} -Dstaging.hg.repo.url=D:/OpenlSourceHG -Dstaging.mvn.repo.url=file://D:/release/mvn-staging-repo -Darguments=&quot;-P internal-deploy&quot;"/>
		</maven>
		<echo>release:perform</echo>
		<maven dir="${moduleFolder}">
			<arg line="-B -X release:perform -Darguments=&quot;-P internal-deploy,gpg-sign -Dgpg.passphrase=${passphrase} -Dstaging.hg.repo.url=file:////D:/OpenlSourceHG&quot;" />
		</maven>
		<echo>Changing versions after the release</echo>
		<antcall target="changeVersionsAfterHG"/>
	</target>
	
	<target name="changeVersionsAfterHG">
        <antcall target="changeHG">
			<param name="prjects_root" value="${moduleFolder}"/>
			<param name="previous_version" value="${release_version}"/>
			<param name="version" value="${next_eclipse_version}"/>
			<param name="version_for_poms" value="${next_maven_version}"/>
		</antcall>
		<antcall target="commitModuleHG"/>
	</target>
	
	<target name="sonatypeDeployForModule">
		<!-- Revert changes that maven release plugin have done in phase "perform" -->
		<exec executable="svn">
			<arg line="revert ${moduleFolder}/target/checkout/ -R"/>
		</exec>
		<maven dir="${moduleFolder}/target/checkout/">
			<arg line="clean deploy -P sonatype-deploy,gpg-sign -Dgpg.passphrase=${passphrase}" />
		</maven>
	</target>
	

	<target name="releaseBasePom">
		<antcall target="releaseModule">
			<param name="moduleFolder" value="${root_folder}/${basepom_folder}"/>
		</antcall>
	</target>
	
	<target name="releaseAllOther">
			<antcall target="releaseModule">
				<param name="moduleFolder" value="${root_folder}/${allOther_folder}"/>
			</antcall>
	</target>
	
    <target name="help">
        <echo>
        	Run this script with predefined properties in release.properties file with target "fullRelease":
        		release_version - version which will be used for release.
        		next_eclipse_version - version to use for new local working copy (in manifests and features).
	        	next_maven_version - version to use for new local working copy (in poms for base-pom and dependensies versions).
        </echo>
    </target>
</project>

<!-- http://weblogs.java.net/blog/fabriziogiudici/archive/2009/10/29/fixing-two-problems-maven-mercurial-hudson-->
