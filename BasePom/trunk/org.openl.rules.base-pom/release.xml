<project name="overallRelease" default="help" basedir=".">

	<description>
	    This script is designed to build all projects from base-pom in two ways:
		all projects are placed into single workspace and full SVN project structure.
	</description>

	<import file="changeVersion.xml"/>

	<property file="release.properties"/>

	<!-- BEGIN M2 PRESET -->
 	<property name="maven.commoncmd" value="" />

    <condition property="maven.line" value="--offline ${maven.commoncmd}">
        <istrue value="${offline}" />
    </condition>
    <property name="maven.line" value="${maven.commoncmd}" />

    <condition property="maven.executable" value="mvn.bat">
        <os family="windows" />
    </condition>
    <property name="maven.executable" value="mvn" />

    <condition property="maven.executable.real" value="${m2.home}/bin/${maven.executable}">
        <isset property="m2.home" />
    </condition>
    <property name="maven.executable.real" value="${maven.executable}"/>

    <presetdef name="maven">
        <exec failonerror="true" executable="${maven.executable.real}">
            <arg line="${maven.line}" />
        </exec>
    </presetdef>
    <!-- END M2 PRESET -->

	<target name="commitModule">
		<exec executable="svn">
			<arg line="commit ${moduleFolder}"/>
			<arg line="-m &quot;EPBDS-428 Temporary changed versions for release.&quot;"/>
			<arg line="--username ${svnLogin}"/>
			<arg line="--password ${svnPassword}"/>
		</exec>
	</target>

	<target name="fullCommit">
		<antcall target="commitModule">
			<param name="moduleFolder" value="${root_folder}/${basepom_folder}"/>
		</antcall>
		<antcall target="commitModule">
			<param name="moduleFolder" value="${root_folder}/${poi_folder}"/>
		</antcall>
		<antcall target="commitModule">
			<param name="moduleFolder" value="${root_folder}/${dev_folder}"/>
		</antcall>
		<antcall target="commitModule">
			<param name="moduleFolder" value="${root_folder}/${studio_folder}"/>
		</antcall>
		<antcall target="commitModule">
			<param name="moduleFolder" value="${root_folder}/${wsfrontend_folder}"/>
		</antcall>
		<antcall target="commitModule">
			<param name="moduleFolder" value="${root_folder}/${site_folder}"/>
		</antcall>
        <antcall target="commitModule">
			<param name="moduleFolder" value="${root_folder}/${tut_folder}"/>
		</antcall>
	</target>
	
	<target name="changeVersions">
		<antcall target="change">
			<param name="projects_root" value="${root_folder}/${basepom_folder}"/>
		</antcall>
		<antcall target="change">
			<param name="projects_root" value="${root_folder}/${poi_folder}"/>
		</antcall>
		<antcall target="change">
			<param name="projects_root" value="${root_folder}/${dev_folder}"/>
		</antcall>
		<antcall target="change">
			<param name="projects_root" value="${root_folder}/${studio_folder}"/>
		</antcall>
		<antcall target="change">
			<param name="projects_root" value="${root_folder}/${wsfrontend_folder}"/>
		</antcall>
		<antcall target="change">
			<param name="projects_root" value="${root_folder}/${site_folder}"/>
		</antcall>
        <antcall target="change">
			<param name="projects_root" value="${root_folder}/${tut_folder}"/>
		</antcall>
	</target>

	<target name="prepareModule">
		<maven dir="${moduleFolder}" failonerror="false">
			<arg line="-B release:prepare -DautoVersionSubmodules=true -DdevelopmentVersion=${next_maven_version} -DscmCommentPrefix=EPBDS-345.[maven-release-plugin] -Dtag=release-${release_version}  -Dusername=${svnLogin} -Dpassword=${svnPassword} -DreleaseVersion=${release_version} -Darguments=&quot;-P internal-deploy&quot;"/>
		</maven>
		<exec executable="svn">
			<arg line="update ${moduleFolder}"/>
		</exec>
		<maven dir="${moduleFolder}" failonerror="false">
			<arg line="-B release:prepare -DautoVersionSubmodules=true -DdevelopmentVersion=${next_maven_version} -DscmCommentPrefix=EPBDS-345.[maven-release-plugin] -Dtag=release-${release_version}  -Dusername=${svnLogin} -Dpassword=${svnPassword} -DreleaseVersion=${release_version} -Darguments=&quot;-P internal-deploy&quot;"/>
		</maven>
	</target>

	<target name="releaseModule" depends="prepareModule">
		<maven dir="${moduleFolder}" failonerror="false">
			<arg line="-B release:perform -Darguments=&quot;-P internal-deploy&quot;" />
		</maven>
	</target>
	
	<target name="prepare">
        <antcall target="changeVersions">
			<param name="previous_version" value="${release_version}"/>
			<param name="version" value="${release_version}"/>
			<param name="version_for_poms" value="${release_version}"/>
		</antcall>
		<antcall target="fullCommit"/>
	</target>
	
	<target name="execute" depends="prepare">
		<antcall target="releaseModule">
			<param name="moduleFolder" value="${root_folder}/${basepom_folder}"/>
		</antcall>
		<antcall target="releaseModule">
			<param name="moduleFolder" value="${root_folder}/${poi_folder}"/>
		</antcall>
		<antcall target="releaseModule">
			<param name="moduleFolder" value="${root_folder}/${dev_folder}"/>
		</antcall>
		<antcall target="releaseModule">
			<param name="moduleFolder" value="${root_folder}/${studio_folder}"/>
		</antcall>
		<antcall target="releaseModule">
			<param name="moduleFolder" value="${root_folder}/${wsfrontend_folder}"/>
		</antcall>
        <antcall target="releaseModule">
			<param name="moduleFolder" value="${root_folder}/${tut_folder}"/>
		</antcall>
		<antcall target="releaseModule">
			<param name="moduleFolder" value="${root_folder}/${site_folder}"/>
		</antcall>
	</target>
	
	<target name="fullRelease" depends="execute">
		<antcall target="changeVersions">
			<param name="previous_version" value="${release_version}"/>
			<param name="version" value="${next_eclipse_version}"/>
			<param name="version_for_poms" value="${next_maven_version}"/>
		</antcall>
		<antcall target="fullCommit"/>
	</target>
	
	<target name="LiveExcelRelease">
		<antcall target="change">
			<param name="projects_root" value="${root_folder}/${liveexcel_folder}"/>
			<param name="previous_version" value="${le_release_version}"/>
			<param name="version" value="${le_release_version}"/>
			<param name="version_for_poms" value="${le_release_version}"/>
		</antcall>
		<antcall target="fullCommit"/>
		<antcall target="releaseModule">
			<param name="moduleFolder" value="${root_folder}/${liveexcel_folder}"/>
		</antcall>
		<antcall target="change">
			<param name="projects_root" value="${root_folder}/${liveexcel_folder}"/>
			<param name="previous_version" value="${le_release_version}"/>
			<param name="version" value="${le_next_eclipse_version}"/>
			<param name="version_for_poms" value="${le_next_maven_version}"/>
		</antcall>
		<antcall target="fullCommit"/>
	</target>
    <target name="help">
        <echo>
        	Run this script with predefined properties in release.properties file with target "fullRelease":
        		release_version - version which will be used for release.
        		next_eclipse_version - version to use for new local working copy (in manifests and features).
	        	next_maven_version - version to use for new local working copy (in poms for base-pom and dependensies versions).
        </echo>
    </target>
</project>
