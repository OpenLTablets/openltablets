<html>

<head>
<title>OpenL Tablets - Decision Tables</title>

<!--#include virtual="header_includes.shtml" -->





<body>
<div id="leftbox">

<!--#include virtual="menuleft.html" -->

</div>


<div id="centerbox">

<table cellpadding="3" class="main" width="90%">
<tr>
<td>

<a href="ws-toc401.shtml">Table of Contents</a>

<h1>OpenL Tablets Structure and Semantics</h1>

Also see
<a href="dt-performance411.shtml">Decision Table Performance Optimization</a>
,
<a href="struct-data.shtml">Data Tables</a>
,
<a href="tutorial.shtml">Tutorial</a>


<h2>Decision Table</h2>

<p>
Decision Tables are the cornerstone of any Business Intelligence suite that at least pretends to be business user oriented. 
Just to prove this statement most of the Business Rules vendors recently included their own implementations of Decision Tables
into their offerings. This document argues that Business Rules in essence always <b>are</b> decision tables, but may be it is a  bit overstated.
In any case we present to you here the best solution for integrating decision tables into your application     
</p>

<p>
Here is an implementation of decision table from HelloWorld.xls
</p>
        

<img src="images/site/HelloWorld.png"/>

<p>
On this picture you can easily see the main components of the Decision Tablet. 
</p>
<p>
The first row is a header. It starts with a keyword <code>Rules</code> that is followed by familiar to every Java programmer 
method signature <code>void helloWorld(int hour)</code>, that we call <b>Decision Table Method Header</b>. 
</p>
<p>
The second row provides header for decision table columns. There is a simple naming convention for header columns: 
if header starts with a 'C' then it is a <b>Condition</b>, if it starts with an 'A' it is an <b>Action</b>. 
Since version 3.1.0.6 we introduced (optional) column <b>Rule</b>, where you can put Rule ID
(each Decision Table row is a rule in some sense) . This column is optional and can be used for tracing and 
documentation purposes. Also it can anchor multi-row rule (in case of array parameters). 
</p>
<p>

The third row contains code snippet that actually gets executed according to decision table logic. This code has a standard Java syntax, and therefore can be easily written by any 
Java programmer. 
As you can see, this code uses both parameter from the header <code>hour</code> and from the column <code>min</code>. 
Condition expressions must return type boolean (the <code>return</code> keyword is optional. The code snippet always returns the value of the last expression). 
Action expressions can be of any type. 
</p>
<p>

The fourth row provides column parameter definitions. Each condition and action can have one or more parameters. 
The data in the columns will be converted into appropriate types using  the following rules:
</p>


<table class="ex" cellspacing="0" border="1" width="80%" cellpadding="3">


<tr><th>Java Type</th><th>	Conversion</th></tr>

<tr><td>java.lang.Integer, int</td><td>	Standard Java conversion</td></tr>
<tr><td>java.lang.Long, long	</td><td>	Standard Java conversion</td></tr>
<tr><td>java.lang.Double, double	</td><td>	Standard Java conversion + supports percent character at the end</td></tr>
<tr><td>java.lang.String	</td><td>	Copy of the cell content; because empty cell means ignoring condition or action in Decision Table to enter an empty String you need to write an expression '=""</td></tr>
<tr><td>java.util.Date	</td><td>	Conversion is done by using java.text.DateFormat.SHORT. Due to the fact that Excel converts dates into internal format it is necessary to enter dates as strings (to tell Excel that the cell content should be treated as text start it with apostrophe)</td></tr> 
<tr><td>java.lang.Character, char	</td><td>	Cell must contain single character</td></tr>
<tr><td>java.lang.Boolean, boolean	</td><td>	Words "true", "yes", "t" or "y" in lower or upper case mean <b>true</b>. Everything else mean <b>false</b></td></tr>
<tr><td>Any Java Class	</td><td>	Call is made to the public constructor with a String parameter. This is how, for example, we provide custom data types like IntRange.</td></tr>
<tr><td>org.openl.rules.helpers.IntRange, org.openl.rules.helpers.DoubleRange </td><td>		Supports following formats:  <code>1 - 10</code> (from 1 to 10 inclusive), <code> &lt; 100</code> 
(less than 100), <code>20+</code> (20 or more)</td></tr>
<tr><td>Arrays	</td><td>	Decision Table supports one-dimensional arrays for all supported datatypes. 
Arrays syntax is the same as in Java. Arrays are entered as multiple cells. If you need to enter multiple values in a Decision Table row you should merge vertically the first row cell to cover all the rows in your array columns. 
The first column therefore cannot be an array, the best way to deal with it is to put Rule column first. See <a href="tutorial.shtml">Tutorials</a> for good Array examples</td></tr>
</table>

<p>
The fifth row contains Column Display Names or human readable columns descriptions.
</p>
<p>
Everything below the fifth row is Decision Table data. This data is used as parameter values when code snippets are executed   
</p>

<h3>Expressions in Decision Table</h3>

In addition to literal data Decision Table supports expressions in table cells. 
Expressions should start with '='. Due to the fact that Excel expressions also start with '=', 
expression cells also should be entered as text fields (starting with apostrophe). For example, expression <br>
<code>x+5</code><br/> 
must be entered literally as <br/> 
<code>'=x+5</code> <br/>
Single '='in a cell is not considered an Expression.

The alternative way of entering expressions is to put cell content in '{'... '}' brackets instead of using '='.
<p>
Expression Type must be compatible with the column type.
</p>


<h3>Decision Table Algorithm</h3>

<p>
Decision Table Rows (Rules) are executed from top to bottom. 
In "classic" decision tables all rule rows are executed.
OpenL Tablets also provide the alternative way of execution by using 
so-called <code>RET</code>(return) columns. <code>RET</code> column works as a regular action with the only very 
important exception, once executed it returns the action result as  a result of <b>Decision Table Method</b>. 
The return type of <code>RET</code> column expression must be compatible with the return type of 
<b>Decision Table Method Header</b>. Type <code>void</code> is compatible with anything.     
</p>

<p>
Each Rule conditions are checked from left to right. 
This process stops after the first failure. 
If all Conditions are checked, all the Actions are being performed from left to right. 
Conditions and Actions with empty parameter cells are ignored.
<p>
To see more examples of Decision Tables in action check <a href="tutorial.shtml">OpenL Tablets Tutorial</a>
</p>



Also see 
<a href="struct-data.shtml">Data Tables</a>
,
<a href="tutorial.shtml">Tutorial</a>


<!--#include virtual="footer_includes.shtml" -->




</td>
</tr>
</table>

</div>
</body>
</html>
