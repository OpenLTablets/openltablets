<html>

<head>
<title>OpenL Tablets - Data Tables</title>

<!--#include virtual="header_includes.shtml" -->





<body>
<div id="leftbox">

<!--#include virtual="menuleft.html" -->

</div>


<div id="centerbox">


<table cellpadding="3" class="main" width="90%">
<tr>
<td>

<a href="ws-toc401.shtml">Table of Contents</a>
<h1>OpenL Tablets Structure and Semantics</h1>

Also see 
<a href="struct-decision.shtml">Decision Tables</a>
,
<a href="tutorial.shtml">Tutorial</a>


<h2>Data Tables</h2>
<p>
Data Tables provide the ability to enter Java objects in relational format by simply using Excel spreadsheets. 
It is very intuitive and simple. Each table becomes an array of java objects available to the application through 
standard Java Bean getter method. 
</p>

<img src="images/site/Data1.png"/>

<p>
For example, this table contains 4 instances of a class <code>Person1</code>.
It can be accessed from java application using the following code:
<br/>
<code>Person1[] pp1 = wrapper.getPp1()</code>
<br/>

<p>
As you can see the structure of the table is somewhat similar to the structure
of the <a href="struct-decision.shtml">Decision Table</a>.
</p>
<p>
The first row contains Data Table Header. It has a keyword <code>Data</code>, data type <code>Person1</code> and data table name <code>pp1</code>
</p>

<p>
The second row contains Column Headers. They correspond to the Java programmatic names of the Java Bean 
attributes of the class <code>Person1</code>.  
</p>

<p>
The third row contains Column Display Names. These are human-readable descriptions of the Columns. Using Excel Data Group/Ungroup feature you 
can hide first two rows and present the table to the business user in the following form:   
</p>

<img src="images/site/Data2.png"/>



<h3>Object Graphs</h3>

The unique feature of Data Tables is it's ability to create complete Java object graphs in compile-time. 
There are two different ways to do it: using either foreign keys or using object aggregation. 
 
<h4>Foreign Keys</h4>

<p>
Java objects can be cross-referenced in Data Tables using familiar to every programmer foreign keys. 
Foreign key points to other table primary key, and OpenL Tablets binds it to the Object reference.  
The following picture demonstrates this process, and as always to get more details we refer you to the
<a href="tutorial.shtml">OpenL Tablets Tutorial</a> 
</p>

<img src="images/site/Data3.png"/>

 
<h4>Aggregation</h4>
 
<p>
This approach should be used when Java object "owns" it's reference, for example class <code>Customer</code> has a reference to 
the class <code>Address</code>. In normalized database you would have 2 different tables <code>customers</code> and 
<code>addresses</code> and provide link them using foreign key. The inconvenience of this approach is that you have to 
augment class <code>Address</code> 
to have an unique id (as a primary key) and provide reference using foreign key. OpenL Data Tables give you a nice workaround:
you can enter both objects in the same table. To refer to the street address just put <code>address.street1</code> in column header. 
Similarly for Zip Code use <code>address.zip</code> 
     
</p> 


<img src="images/site/Data4.png"/>



<h3>Summary</h3>
The Data Tablets can be viewed as a way of having a compact read-only database with data stored in Excel tables. 
It can be used for any kind of application data like reference data or storing test case data. 
The Data Tablets provide automatic binding of foreign keys to link data objects from different tables 
and ability to enter aggregate data objects (objects made of other objects) within a single table. 
And we repeat, you don't have to write a single line of code to make this data available to your application.




<br/><br/>
Also see 
<a href="struct-decision.shtml">Decision Tables</a>
,
<a href="tutorial.shtml">Tutorial</a>


<!--#include virtual="footer_includes.shtml" -->




</td>
</tr>
</table>

</div>
</body>
</html>