 ------
 Usage
 ------
 YYYY-MM-DD
 ------

Usage

* Directory structure

  Take into account that OpenL Maven Plugin expects the following directory structure:

+--------------------------------------
        |-- your-project/                               Project root folder
        |  |-- pom.xml                                  Maven project file
        |  |
        |  |-- src/
        |  |  
        |  |  |-- main/
        |  |  |  
        |  |  |  |-- java/                              Contains java sources
        |  |  |  |  
        |  |  |  |-- resources/                         Contains java resources
        |  |  |  |  
        |  |  |  |-- openl/                             Contains all OpenL-related resources (rules, xml etc.)
        |  |  |  |  
        |  |  |  |  |-- rules.xml                       OpenL project descriptor (for OpenL only)
        |  |  |  |  |-- rules/
        |  |  |  |  |  |-- TemplateRules.xls            File with rules
+--------------------------------------

  Note that all OpenL-related resources are located in <<<src/main/openl>>> directory.
  But you can change it to fit your needs (you should change <<<openlResourcesDirectory>>> parameter in maven plugin configuration).

  <<Note:>> It's not recommended to put OpenL-related resources to the <<<src/main/resources>>> folder: in this case your OpenL resources
  will be inside jar file alongside with compiled java classes - most probably it's not what you wanted to do in production.

* Configure interface, domain classes and project descriptor generation

  The simplest way to generate interface for rules defined in the file TemplateRules.xls:

+--------------------------------------
      <build>
        [...]
        <plugins>
            [...]
            <plugin>
                <groupId>org.openl.rules</groupId>
                <artifactId>openl-maven-plugin</artifactId>
                <version>${openl.rules.version}</version>
                <configuration>
                    <generateInterfaces>
                        <generateInterface>
                            <srcFile>src/main/openl/rules/TemplateRules.xls</srcFile>
                            <targetClass>org.company.gen.TemplateRulesInterface</targetClass>
                        </generateInterface>
                    </generateInterfaces>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
        [...]
    </build>
+--------------------------------------

  In this case classes and rules.xml will be generated on each maven run on generate-sources phase.

  If you want to invoke class generation manually, you should remove <<<executions>>> node and then run
  in console when you need:

---
  mvn openl:generate
--- 

  More configuration options you can find on {{{./generate-mojo.html}openl:generate}} goal page.

* Configure OpenL project compilation and validation

+--------------------------------------
      <build>
        [...]
        <plugins>
            [...]
            <plugin>
                <groupId>org.openl.rules</groupId>
                <artifactId>openl-maven-plugin</artifactId>
                <version>${openl.rules.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
        [...]
    </build>
+--------------------------------------

  More configuration options you can find on {{{./compile-mojo.html}openl:compile}} goal page.

* Configure OpenL project testing

  The simplest way to invoke OpenL Tablets Test:

+--------------------------------------
      <build>
        [...]
        <plugins>
            [...]
            <plugin>
                <groupId>org.openl.rules</groupId>
                <artifactId>openl-maven-plugin</artifactId>
                <version>${openl.rules.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
        [...]
    </build>
+--------------------------------------

  More configuration options you can find on {{{./test-mojo.html}openl:test}} goal page.

  But if you want to have more control on tests and want to invoke and debug them from java code, you can instead generate
  JUnit tests for them (in this case don't use the <<<test>>> goal). Configure the <<<generate>>> goal:

+--------------------------------------
      <build>
        [...]
        <plugins>
            [...]
            <plugin>
                <groupId>org.openl.rules</groupId>
                <artifactId>openl-maven-plugin</artifactId>
                <version>${openl.rules.version}</version>
                <configuration>
                    <generateUnitTests>true</generateUnitTests>
                    <generateInterfaces>
                      [...]
                    </generateInterfaces>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
        [...]
    </build>
+--------------------------------------

  If you want to define your own template for JUnit tests, you should set <<<unitTestTemplatePath>>> parameter with a path
  to your Velocity template (for example: <<<\<unitTestTemplatePath\>src/test/resources/MyTemplate.vm\</unitTestTemplatePath\>>>>).
  Here is an example of such template:

+--------------------------------------
#if ($openlInterfacePackage)
package $openlInterfacePackage;
#end

import org.junit.Before;
import org.junit.Test;
import org.openl.rules.runtime.RulesEngineFactory;
import org.openl.rules.testmethod.TestUnitsResults;

import java.io.File;

import static org.junit.Assert.assertTrue;

#set( $openlInterfaceClassWithTests = "${openlInterfaceClass}WithTests" )

public class ${openlInterfaceClass}Test {
    private static interface $openlInterfaceClassWithTests extends $openlInterfaceClass {
#foreach( $testMethodName in $testMethodNames )
        TestUnitsResults $testMethodName();
#end
    }

    private $openlInterfaceClassWithTests instance;

    @Before
    public void setUp() throws Exception {
        File xlsFile = new File("$projectRoot", "$srcFile");
        instance = new RulesEngineFactory<$openlInterfaceClassWithTests>(xlsFile, ${openlInterfaceClassWithTests}.class).newEngineInstance();
    }

#foreach( $testMethodName in $testMethodNames )
    @Test
    public void test$StringUtils.capitalize($testMethodName)() throws Exception {
        TestUnitsResults results = instance.$testMethodName();
        assertTrue(results.toString(), results.getNumberOfFailures() == 0);
    }
#end
}
+--------------------------------------

