 ------
 Usage
 ------
 YYYY-MM-DD
 ------

Usage

* Directory Structure

  Take into account that OpenL Maven Plugin expects the following directory structure:

+--------------------------------------
|- your-project/                   Project root folder
| |- pom.xml                       Maven project file
| |
| |- src/
| |
| | |- main/
| | |
| | | |- java/                     Contains java sources
| | | |
| | | |- resources/                Contains java resources
| | | |
| | | |- openl/                    Contains all OpenL-related resources (rules, xml etc.)
| | | |
| | | |
| | | | |- rules.xml               OpenL project descriptor (for OpenL only)
| | | | |- rules/
| | | | | |- TemplateRules.xls     File with rules
+--------------------------------------

  Note that OpenL-related resources are located in the <<<src/main/openl>>> directory.
  But it can be changed to fit user's needs by changing the <<<openlResourcesDirectory>>> parameter in maven plugin configuration.

  <<Note:>> It is not recommended to put OpenL-related resources to the <<<src/main/resources>>> folder. In this case, OpenL resources
  will be inside the JAR file alongside with the compiled Java classes - most probably not what was expected to do in production.

* Configure Interface, Domain Classes and Project Descriptor Generation

  The simplest way to generate interface for rules defined in the TemplateRules.xls file:

+--------------------------------------
<build>
  [...]
  <plugins>
      [...]
      <plugin>
          <groupId>org.openl.rules</groupId>
          <artifactId>openl-maven-plugin</artifactId>
          <version>${openl.rules.version}</version>
          <configuration>
              <generateInterfaces>
                  <generateInterface>
                      <srcFile>src/main/openl/rules/TemplateRules.xls</srcFile>
                      <targetClass>org.company.gen.TemplateRulesInterface</targetClass>
                  </generateInterface>
              </generateInterfaces>
          </configuration>
          <executions>
              <execution>
                  <goals>
                      <goal>generate</goal>
                  </goals>
              </execution>
          </executions>
      </plugin>

  </plugins>
  [...]
</build>
+--------------------------------------

  In this case, classes and rules.xml are generated on each Maven run during the generate-sources phase.

  To invoke class generation manually, remove the <<<executions>>> node and run in the console when needed:

---
  mvn openl:generate
--- 

  More configuration options can be found on the {{{./generate-mojo.html}openl:generate}} goal page.

* Configure OpenL Project Compilation and Validation

+--------------------------------------
<build>
  [...]
  <plugins>
      [...]
      <plugin>
          <groupId>org.openl.rules</groupId>
          <artifactId>openl-maven-plugin</artifactId>
          <version>${openl.rules.version}</version>
          <executions>
              <execution>
                  <goals>
                      <goal>compile</goal>
                  </goals>
              </execution>
          </executions>
      </plugin>

  </plugins>
  [...]
</build>
+--------------------------------------

  More configuration options can be found on the {{{./compile-mojo.html}openl:compile}} goal page.

* Configure OpenL Project Testing

  The simplest way to invoke OpenL Tablets Test:

+--------------------------------------
<build>
  [...]
  <plugins>
      [...]
      <plugin>
          <groupId>org.openl.rules</groupId>
          <artifactId>openl-maven-plugin</artifactId>
          <version>${openl.rules.version}</version>
          <executions>
              <execution>
                  <goals>
                      <goal>test</goal>
                  </goals>
              </execution>
          </executions>
      </plugin>

  </plugins>
  [...]
</build>
+--------------------------------------

  More configuration options can be found on the {{{./test-mojo.html}openl:test}} goal page.

  To have more control over tests, to invoke and debug them from the Java code, generate JUnit tests.
  In this case do not use the <<<test>>> goal. Configure the <<<generate>>> goal:

+--------------------------------------
<build>
  [...]
  <plugins>
      [...]
      <plugin>
          <groupId>org.openl.rules</groupId>
          <artifactId>openl-maven-plugin</artifactId>
          <version>${openl.rules.version}</version>
          <configuration>
              <generateUnitTests>true</generateUnitTests>
              <generateInterfaces>
                [...]
              </generateInterfaces>
          </configuration>
          <executions>
              <execution>
                  <goals>
                      <goal>generate</goal>
                  </goals>
              </execution>
          </executions>
      </plugin>

  </plugins>
  [...]
</build>
+--------------------------------------

  To define a user's custom template for JUnits tests, set the <<<unitTestTemplatePath>>> parameter with a path
  to the user's custom Velocity template. For example, <<<\<unitTestTemplatePath\>src/test/resources/MyTemplate.vm\</unitTestTemplatePath\>>>>.
  Here is an example of such template:

+--------------------------------------
#if ($openlInterfacePackage)
package $openlInterfacePackage;
#end

import org.junit.Before;
import org.junit.Test;
import org.openl.rules.runtime.RulesEngineFactory;
import org.openl.rules.testmethod.TestUnitsResults;

import java.io.File;

import static org.junit.Assert.assertTrue;

#set( $openlInterfaceClassWithTests = "${openlInterfaceClass}WithTests" )

public class ${openlInterfaceClass}Test {
    private static interface $openlInterfaceClassWithTests extends $openlInterfaceClass {
#foreach( $testMethodName in $testMethodNames )
        TestUnitsResults $testMethodName();
#end
    }

    private $openlInterfaceClassWithTests instance;

    @Before
    public void setUp() throws Exception {
        File xlsFile = new File("$projectRoot", "$srcFile");
        instance = new RulesEngineFactory<$openlInterfaceClassWithTests>(
            xlsFile,
            ${openlInterfaceClassWithTests}.class
        ).newEngineInstance();
    }

#foreach( $testMethodName in $testMethodNames )
    @Test
    public void test$StringUtils.capitalize($testMethodName)() throws Exception {
        TestUnitsResults results = instance.$testMethodName();
        assertTrue(results.toString(), results.getNumberOfFailures() == 0);
    }
#end
}
+--------------------------------------

