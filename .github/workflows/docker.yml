# This workflow will publish Docker images to the Central Docker Hub repository.

name: DockerHub Publisher

on:
  # Manual run from the GitHub action page
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: false
        default: 'latest'

jobs:
  publish:

    name: Publish ${{ github.event.inputs.version }} images to DockerHub

    runs-on: ubuntu-latest

    steps:
    - name: Define settings
      run: |
        echo "JAVA8=8-jre-focal" >> $GITHUB_ENV
        echo "JAVA11=11-jre-focal" >> $GITHUB_ENV
        echo "SERVER=https://repo.maven.apache.org/maven2" >> $GITHUB_ENV

    - name: Setup Soft
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libxml2-utils
        gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 902B17732F38021331F3019F82521DFA3BF8F6FC

    - name: Configure GIT
      run: |
        git config --global user.name "OpenL Tablets"
        git config --global user.email openltablets@gmail.com
        git config --global core.autocrlf false

    - name: Checkout
      uses: actions/checkout@v2

    - name: Determine the latest version
      run: |
        metaUrl="$SERVER/org/openl/org.openl.core/maven-metadata.xml"
        metaData="$(wget -qO - $metaUrl)"
        latest="$(echo $metaData | xmllint --xpath /metadata/versioning/latest/text\(\) - )"
        version="${{ github.event.inputs.version }}"
        if [ "$version" = "latest" ]; then
          version="$latest"
        fi
        major=$(echo $version | grep -o -E [0-9]+.[0-9]+ | head -n1)
        latestMajor=$(echo $metaData | grep -E $major\.[0-9.]+ -o | sort -V -r | head -n1)
        echo $version
        echo $major
        echo $latest
        echo $latestMajor
        tags_11="-t openltablets/\$appName:$version"
        tags_17="-t openltablets/\$appName:$version-jre17"
        if [ "$latestMajor" = "$version" ]; then
          tags_11+=" -t openltablets/\$appName:$major.x"
          tags_17+=" -t openltablets/\$appName:$major.x-jre17"
        fi
        if [ "$latest" = "$version" ]; then
          tags_11+=" -t openltablets/\$appName:latest"
        fi
        echo "tags_11=$tags_11" >> $GITHUB_ENV
        echo "tags_17=$tags_17" >> $GITHUB_ENV
        echo "version=$version" >> $GITHUB_ENV

    - name: Download WebStudio
      run: |
        # Define urls
        artifactUrl="$SERVER/org/openl/rules/org.openl.rules.webstudio"
        downloadUrl="$artifactUrl/$version/org.openl.rules.webstudio-$version.war"
        # Download artifact.
        wget --progress=dot:giga -O app.war "$downloadUrl"
        wget --progress=dot:giga -O app.war.asc "$downloadUrl.asc"
        # GPG verification
        gpg --batch --verify app.war.asc app.war
        unzip -q app.war -d webstudio
        rm app.war.asc
        rm app.war

    - name: Download Rule Services
      run: |
        # Define urls
        artifactUrl="$SERVER/org/openl/rules/org.openl.rules.ruleservice.ws"
        downloadUrl="$artifactUrl/$version/org.openl.rules.ruleservice.ws-$version.war"
        # Download artifact.
        wget --progress=dot:giga -O app.war "$downloadUrl"
        wget --progress=dot:giga -O app.war.asc "$downloadUrl.asc"
        # GPG verification
        gpg --batch --verify app.war.asc app.war
        unzip -q app.war -d webservice
        rm app.war.asc
        rm app.war

    - name: Download Rule Services (ALL)
      run: |
        # Define urls
        artifactUrl="$SERVER/org/openl/rules/org.openl.rules.ruleservice.ws.all"
        downloadUrl="$artifactUrl/$version/org.openl.rules.ruleservice.ws.all-$version.war"
        # Download artifact.
        wget --progress=dot:giga -O app.war "$downloadUrl"
        wget --progress=dot:giga -O app.war.asc "$downloadUrl.asc"
        # GPG verification
        gpg --batch --verify app.war.asc app.war
        unzip -q app.war -d webservice-all
        rm app.war.asc
        rm app.war

    - name: Download DEMO
      run: |
        # Define urls
        artifactUrl="$SERVER/org/openl/rules/demo/openl-demo-app"
        downloadUrl="$artifactUrl/$version/openl-demo-app-$version.zip"
        # Download artifact.
        wget --progress=dot:giga -O openl-tablets-demo.zip "$downloadUrl"
        wget --progress=dot:giga -O demo.zip.asc "$downloadUrl.asc"
        # GPG verification
        gpg --batch --verify demo.zip.asc openl-tablets-demo.zip
        rm demo.zip.asc

    - name: Prepare for multi-platform docker build
      run: |
        echo "BUILD_PLATFORMS=linux/amd64,linux/arm64/v8" >> $GITHUB_ENV
        docker run --privileged --rm tonistiigi/binfmt --install all
        docker buildx create --use
        # In order to implement atomic push-all-images functionality, build and push should be split to different 
        # steps. However, currently Docker cannot hold multi-platform images in a local storage. Therefore, docker 
        # cache is used in order to implement this functionality. In the subsequest steps all images are built and 
        # docker puts all layers of those images in a cache. In the last step, when images are built, tagged, and 
        # pushed to external repository, docker use image layers from the cache, which are created here. In case of a 
        # build failure none of the images are pushed to the external repository.
    

    - name: DEMO JDK 11
      env:
        appName : demo
      run: >
        eval docker buildx build $tags_11
        --platform ${BUILD_PLATFORMS} --output type=registry,push=false
        -f ./Dockerfiles/Demo .

    - name: Rule Services (All) JDK 11
      run: >
        docker buildx build -t openltablets/ws:$version-all
        --platform ${BUILD_PLATFORMS} --output type=registry,push=false
        --build-arg APP=webservice-all
        --build-arg JDK=$JAVA11
        -f ./Dockerfiles/WebApp .

    - name: Rule Services JDK 11
      env:
        appName : ws
      run: >
        eval docker buildx build $tags_11
        --platform ${BUILD_PLATFORMS} --output type=registry,push=false
        --build-arg APP=webservice
        --build-arg JDK=$JAVA11
        -f ./Dockerfiles/WebApp .

    - name: WebStudio JDK 11
      env:
        appName : webstudio
      run: >
        eval docker buildx build $tags_11
        --platform ${BUILD_PLATFORMS} --output type=registry,push=false
        --build-arg APP=webstudio
        --build-arg JDK=$JAVA11
        -f ./Dockerfiles/WebApp .

    - name: Push images
      run: |
        docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_TOKEN }}

        eval docker buildx build $tags_11
        --platform ${BUILD_PLATFORMS} --push
        -f ./Dockerfiles/Demo .

        docker buildx build -t openltablets/ws:$version-jre8-all
        --platform ${BUILD_PLATFORMS} --push
        --build-arg APP=webservice-all
        --build-arg JDK=$JAVA8
        -f ./Dockerfiles/WebApp .

        docker buildx build -t openltablets/ws:$version-all
        --platform ${BUILD_PLATFORMS} --push
        --build-arg APP=webservice-all
        --build-arg JDK=$JAVA11
        -f ./Dockerfiles/WebApp .

        eval docker buildx build $tags_8
        --platform ${BUILD_PLATFORMS} --push
        --build-arg APP=webservice
        --build-arg JDK=$JAVA8
        -f ./Dockerfiles/WebApp .

        eval docker buildx build $tags_11
        --platform ${BUILD_PLATFORMS} --push
        --build-arg APP=webservice
        --build-arg JDK=$JAVA11
        -f ./Dockerfiles/WebApp .

        eval docker buildx build $tags_8
        --platform ${BUILD_PLATFORMS} --push
        --build-arg APP=webstudio
        --build-arg JDK=$JAVA8
        -f ./Dockerfiles/WebApp .

        eval docker buildx build $tags_11
        --platform ${BUILD_PLATFORMS} --push
        --build-arg APP=webstudio
        --build-arg JDK=$JAVA11
        -f ./Dockerfiles/WebApp .
