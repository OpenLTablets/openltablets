# This workflow will build and deploys docker images to Heroku dynos

name: Heroku App

on:
  schedule:
    # Every day at 05:00 UTC
    - cron:  '0 5 * * *'
  # Manual run from the GitHub action page
  workflow_dispatch:
    inputs:
      ref:
        description: 'Ref to build'
        required: false
      merge:
        description: "Merge 'Ref'?"
        required: true
        type: boolean
        default: true

jobs:
  build:

    name: Working on ${{ github.ref_name }}

    runs-on: ubuntu-20.04

    steps:

    - name: Configure GIT
      run: |
        git config --global user.name "OpenL Tablets"
        git config --global user.email openltablets@gmail.com
        git config --global core.autocrlf false

    - name: Checkout ${{ github.event.inputs.branch }}
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.ref }}

    - name: Setup Java 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'temurin'

    - name: Set environment variables
      run: |
        echo "WEEK=$(date +%U)" >> $GITHUB_ENV
        echo "DAY=$(date +%w)" >> $GITHUB_ENV
      shell: bash

    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: maven-x${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          maven-${{ env.WEEK }}-${{ env.DAY }}
          maven-${{ env.WEEK }}
          maven-

    - name: Merge
      env:
        MERGE_MSG: "Merge ${{ github.ref_name }} into ${{ inputs.ref }}"
        DEPTH: 300
      if: >-
        inputs.ref != '' &&
        inputs.merge &&
        inputs.ref != github.ref_name
      run: |
        git fetch --no-tags --no-recurse-submodules --progress --deepen=$DEPTH origin '+${{ inputs.ref }}'
        git fetch --no-tags --no-recurse-submodules --progress --depth=$DEPTH origin '+${{ github.ref_name }}'
        git merge FETCH_HEAD -m "$MERGE_MSG"

    - name: Maven version
      run: mvn -v

    - name: Build with Maven
      run: mvn package -DskipTests -T 1C

    - name: Deploy DEMO
      uses: ./.github/actions/deploy-heroku
      with:
        login: ${{ secrets.HEROKU_LOGIN }}
        token: ${{ secrets.HEROKU_TOKEN }}
        app-name: openl-demo
        javaOpts: -Xms16M -Xmx192M -Djetty.http.port=$PORT -Dxxx.yyy=jdbc:sqr://www.cloud:1433;db=ab -Dxxx=$YYY
        dockerfile: Dockerfiles/Demo
        context: DEMO/org.openl.rules.demo/target

    - name: Deploy WebStudio
      uses: ./.github/actions/deploy-heroku
      with:
        login: ${{ secrets.HEROKU_LOGIN }}
        token: ${{ secrets.HEROKU_TOKEN }}
        app-name: openl-webstudio
        javaOpts: -Xms16M -Xmx256M -Djetty.http.port=$PORT -Dwebstudio.configured=true -Dproduction-repository.uri=${OPENL_HOME}/repo -Dxxx.yyy=jdbc:sqr://www.cloud:1433;db=ab -Dxxx=$YYY
        dockerfile: Dockerfiles/WebApp
        context: STUDIO/org.openl.rules.webstudio

    - name: Deploy RuleServices
      uses: ./.github/actions/deploy-heroku
      with:
        login: ${{ secrets.HEROKU_LOGIN }}
        token: ${{ secrets.HEROKU_TOKEN }}
        app-name: openl-ruleservices
        javaOpts: -Xms16M -Xmx64M -Djetty.http.port=$PORT -Druleservice.deployer.enabled=true -Dproduction-repository.factory=repo-file -Dproduction-repository.uri=${OPENL_HOME}/repo -Dxxx.yyy=jdbc:sqr://www.cloud:1433;db=ab -Dxxx=$YYY
        dockerfile: Dockerfiles/WebApp
        context: WSFrontend/org.openl.rules.ruleservice.ws

    - name: Deploy RuleServices (ALL)
      uses: ./.github/actions/deploy-heroku
      with:
        login: ${{ secrets.HEROKU_LOGIN }}
        token: ${{ secrets.HEROKU_TOKEN }}
        app-name: openl-ruleservices-all
        javaOpts: -Xms16M -Xmx128M -Djetty.http.port=$PORT -Druleservice.deployer.enabled=true -Dproduction-repository.factory=repo-file -Dproduction-repository.uri=${OPENL_HOME}/repo -Dxxx.yyy=jdbc:sqr://www.cloud:1433;db=ab -Dxxx=$YYY
        dockerfile: Dockerfiles/WebApp
        context: WSFrontend/org.openl.rules.ruleservice.ws.all
