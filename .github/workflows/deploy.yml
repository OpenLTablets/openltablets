# This workflow will build a Java project with Maven on the daily basis (aka Nightly Build).
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Deploy Maven artifacts

on:
  schedule:
  # Every day at 23:00 UTC+3
  - cron:  '0 20 * * *'
  # Manual run from the GitHub action page
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: false

jobs:
  deploy:

    name: Deploy

    permissions:
      packages: write

    runs-on: ubuntu-latest

    steps:

    - name: Configure GIT
      run: |
        git config --global user.name "OpenL Tablets"
        git config --global user.email openltablets@gmail.com
        git config --global core.autocrlf false

    - name: Checkout ${{ github.event.inputs.branch }}
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.branch }}

    - uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Set environment variables
      run: |
        echo "WEEK=$(date +%U)" >> $GITHUB_ENV
        echo "DAY=$(date +%w)" >> $GITHUB_ENV
      shell: bash

    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: maven-x${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          maven-${{ env.WEEK }}-${{ env.DAY }}
          maven-${{ env.WEEK }}
          maven-

    - name: Build with Maven
      run: mvn package -DskipTests

    - name: Deploy Maven artifacts
      run: |
        cd STUDIO/org.openl.rules.webstudio
        mvn deploy:deploy-file -DpomFile=pom.xml -Dfile=target/webstudio.war -Durl=https://maven.pkg.github.com/openl-tablets/openl-tablets -DrepositoryId=github
        cd ../../WSFrontend/org.openl.rules.ruleservice.ws
        mvn deploy:deploy-file -DpomFile=pom.xml -Dfile=target/webservice.war -Durl=https://maven.pkg.github.com/openl-tablets/openl-tablets -DrepositoryId=github
        cd ../../WSFrontend/org.openl.rules.ruleservice.ws.all
        mvn deploy:deploy-file -DpomFile=pom.xml -Dfile=target/webservice-all.war -Durl=https://maven.pkg.github.com/openl-tablets/openl-tablets -DrepositoryId=github
        cd ../../DEMO/org.openl.rules.demo
        mvn deploy:deploy-file -DpomFile=pom.xml -Dfile=target/openl-tablets-demo.zip -Dpackaging=zip -Durl=https://maven.pkg.github.com/openl-tablets/openl-tablets -DrepositoryId=github
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Prepare for multi-platform docker build
      run: |
        echo "BUILD_PLATFORMS=linux/amd64,linux/arm64/v8" >> $GITHUB_ENV
        docker run --privileged --rm tonistiigi/binfmt --install all
        docker buildx create --use

    - name: Build docker images
      run: |
        cd Dockerfiles
        echo Platforms: ${BUILD_PLATFORMS}
        
        # In order to implement atomic push-all-images functionality, build and push should be split to different 
        # steps. However, currently Docker cannot hold multi-platform images in a local storage. Therefore, docker 
        # cache is used in order to implement this functionality. Here all images are built and docker puts all layers 
        # of these images in a cache. In the following step, when images are built, tagged, and pushed to external 
        # repository, docker use image layers from the cache, which are created here. In case of a build failure none 
        # of the images are pushed to the external repository.
        
        docker buildx build -f WebApp ../WSFrontend/org.openl.rules.ruleservice.ws \
          --platform ${BUILD_PLATFORMS} --output type=registry,push=false
        docker buildx build -f WebApp ../WSFrontend/org.openl.rules.ruleservice.ws.all \
          --platform ${BUILD_PLATFORMS} --output type=registry,push=false
        docker buildx build -f WebApp ../STUDIO/org.openl.rules.webstudio \
          --platform ${BUILD_PLATFORMS} --output type=registry,push=false
        docker buildx build -f Demo   ../DEMO/org.openl.rules.demo/target \
          --platform ${BUILD_PLATFORMS} --output type=registry,push=false
    - name: Push docker images
      run: |
        cd Dockerfiles
        repo=ghcr.io/${{ github.repository_owner }}
        echo ${{ github.token }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
        docker buildx build -t $repo/ws:x        -f WebApp ../WSFrontend/org.openl.rules.ruleservice.ws \
          --platform ${BUILD_PLATFORMS} --push
        docker buildx build -t $repo/ws:x-all    -f WebApp ../WSFrontend/org.openl.rules.ruleservice.ws.all \
          --platform ${BUILD_PLATFORMS} --push
        docker buildx build -t $repo/webstudio:x -f WebApp ../STUDIO/org.openl.rules.webstudio \
          --platform ${BUILD_PLATFORMS} --push
        docker buildx build -t $repo/demo:x      -f Demo ../DEMO/org.openl.rules.demo/target \
          --platform ${BUILD_PLATFORMS} --push
