    /**
    * The default implementation Object.clone() method returns a Shallow Copy.
    * <p>
    *     In shallow copy, if the field value is a primitive type, it copies its value; otherwise,
    *     if the field value is a reference to an object, it copies the reference, hence referring to the same object.
    *     Now, if one of these objects is modified, the change is visible in the other.
    * </p>
    * @see <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#clone()">Object#clone()</a>
    * @see <a href="https://en.wikipedia.org/wiki/Clone_(Java_method)">Clone (Java_method)</a>
    */
    @Override
    public IRulesRuntimeContext clone() throws CloneNotSupportedException {
        DefaultRulesRuntimeContext defaultRulesRuntimeContext = (DefaultRulesRuntimeContext) super.clone();
        // create a new instance of `Hashmap`. By default clone creates a shallow copy in defaultRulesRuntimeContext.
        defaultRulesRuntimeContext.internalMap = new HashMap<>(this.internalMap);
        return defaultRulesRuntimeContext;
    }

    @Override
    public void setValue(String name, Object value) {
#foreach( $contextPropertyDefinition in $contextPropertyDefinitions )
        if ("$contextPropertyDefinition.Name".equals(name)) {
            set$tool.formatAccessorName($contextPropertyDefinition.Name)(($tool.getTypeName($contextPropertyDefinition.Type.InstanceClass)) value);
            return;
        }
#end
    }

#foreach( $contextPropertyDefinition in $contextPropertyDefinitions )
    private $tool.getTypeName($contextPropertyDefinition.Type.InstanceClass) $contextPropertyDefinition.Name = null;

    @Override
    public $tool.getTypeName($contextPropertyDefinition.Type.InstanceClass) get$tool.formatAccessorName($contextPropertyDefinition.Name)() {
        return $contextPropertyDefinition.Name;
    }

    @Override
    public void set$tool.formatAccessorName($contextPropertyDefinition.Name)($tool.getTypeName($contextPropertyDefinition.Type.InstanceClass) $contextPropertyDefinition.Name) {
        this.$contextPropertyDefinition.Name = $contextPropertyDefinition.Name;
        internalMap.put("$contextPropertyDefinition.Name", $contextPropertyDefinition.Name);
        cache = null;
    }

#end
    public static final Map<String, Class<?>> CONTEXT_PROPERTIES;

    static {
        Map<String, Class<?>> contextFields = new TreeMap<>();
#foreach( $contextPropertyDefinition in $contextPropertyDefinitions )
        contextFields.put("$contextPropertyDefinition.Name", ${tool.getTypeName($contextPropertyDefinition.Type.InstanceClass)}.class);
#end
        CONTEXT_PROPERTIES = Collections.unmodifiableMap(contextFields);
    }
