options
{
  // see CharStream.html in doc for JavaCC
  // input streams were edited manually!
  UNICODE_INPUT = true;
  // TODO: JAVA_UNICODE_ESCAPE = true;

  LOOKAHEAD= 1;
  STATIC = false;
  // DEBUG_TOKEN_MANAGER = true;
  // DEBUG_PARSER = true;
  // DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(BExGrammar)
package org.openl.grammar.bexgrammar;

public class BExGrammar extends org.openl.grammar.JavaCC30Grammar
{
  public BExGrammar()
  {
    this (new java.io.StringReader(""));		
  }

  protected org.openl.util.text.IPosition begin(Token t)
  {
    return pos(t.beginLine, t.beginColumn);
  }

  protected org.openl.util.text.IPosition end(Token t)
  {
    return pos(t.endLine, t.endColumn);
  }

  protected org.openl.util.text.TextInterval pos(Token t)
  {
    return t == null ? null : new org.openl.util.text.TextInterval(begin(t), end(t));
  }

  protected org.openl.util.text.TextInterval pos(Token t1, Token t2)
  {
    return new org.openl.util.text.TextInterval(begin(t1), end(t2));
  }

  protected org.openl.util.text.TextInterval pos(
  String lexError, 
  Token t)
  {
    String prefix = "Lexical error at line ";
    if (!lexError.startsWith(prefix))
    {
      return pos(t);
    }
    lexError = lexError.substring(prefix.length());
    int i = 0;
    int line = 0;
    int col = 0;
    while (Character.isDigit(lexError.charAt(i)))
    {
      line = line * 10 + lexError.charAt(i) - '0';
      ++i;
    }
    String prefix2 = ", column ";
    i += prefix2.length();
    while (Character.isDigit(lexError.charAt(i)))
    {
      col = col * 10 + lexError.charAt(i) - '0';
      ++i;
    }
    return new org.openl.util.text.TextInterval(
    pos(line, col), 
    pos(line, col));
  }

  public void parseTopNode(String type)
  {
    try
    {
      switch (type) {
          case "method.body":
              parseTopNodeInternal();
              break;
          case "method.header":
              parseMethodHeader();
              break;
          case "module":
              parseModuleInternal();
              break;
         case "param.declaration":
              parseParamDeclaration();
              break;
          case "type":
              parseType();
              break;
      }
    }
    catch (ParseException pe)
    {
      syntaxError =
      new org.openl.syntax.exception.SyntaxNodeException(
      pe.getMessage(), 
      null, 
      pos(pe.currentToken), 
      module);
    }
    catch (TokenMgrError err)
    {
      org.openl.util.text.TextInterval loc = pos(err.getMessage(), token);
      syntaxError =
      new org.openl.syntax.exception.SyntaxNodeException(err.getMessage(), null, loc, module);
    }
    catch (Exception e)
    {
      syntaxError = new org.openl.syntax.exception.SyntaxNodeException("", e, pos(token), module);
    }
    catch (Throwable t)
    {
      syntaxError = new org.openl.syntax.exception.SyntaxNodeException("", t, pos(token), module);
    }
  }
} //EOF JGrammar

PARSER_END(BExGrammar)

< DEFAULT, REF_IDENTIFIER >
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

<* >
TOKEN :
{
  < #_WHITESPACE :
    (
      " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
    ) >
}

TOKEN :
{
  < DOT_OPERATOR : "." > : REF_IDENTIFIER
| < AMPERSAND : "&" > : REF_IDENTIFIER
}

/* JAVA RESERVED WORDS AND LITERALS */

TOKEN :
{
  //< ABSTRACT : "abstract" >
  //| < BOOLEAN: "boolean" >
  < BREAK : "break" >
  //| < BYTE: "byte" >
| < CASE : "case" >
  //| < CATCH : "catch" >
  //| < CHAR: "char" >
  //| < CLASS: "class" >
| < CONST : "const" >
| < CONTINUE : "continue" >
| < _DEFAULT : "default" >
| < DO : "do" >
  //| < DOUBLE: "double" >
| < ELSE : "else" >
  //| < EXTENDS : "extends" >
| < FALSE : "false" >
  //| < FINAL : "final" >
  //| < FINALLY : "finally" >
  //| < FLOAT: "float" >
| < FOR : "for" >
| < GOTO : "goto" >
| < IF : "if" >
  //| < IMPLEMENTS : "implements" >
  //| < IMPORT : "import" >
| < INSTANCEOF : "instanceof" >
  //| < INT: "int" >
  //| < INTERFACE : "interface" >
  //| < LONG: "long" >
  //| < NATIVE : "native" >
| < NEW : "new" >
| < NULL : "null" >
  //| < PACKAGE : "package" >
  //| < PRIVATE : "private" >
  //| < PROTECTED : "protected" >
  //| < PUBLIC : "public" >
| < RETURN : "return" >
  //| < SHORT: "short" >
  //| < STATIC : "static" >
| < SUPER : "super" >
  //| < SWITCH : "switch" >
  //| < SYNCHRONIZED : "synchronized" >
  //| < THIS: "this" >
| < THROW : "throw" >
  //| < THROWS : "throws" >
  //| < TRANSIENT : "transient" >
| < TRUE : "true" >
  //| < TRY : "try" >
| < VOID : "void" >
  //| < VOLATILE : "volatile" >
| < WHILE : "while" >
}

/* EXTENDED RESERVED WORDS */

TOKEN :
{
  < OF_THE : "of" (< _WHITESPACE >)+ "the" >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DDOT : ".." >
| < TDOT : "..." >
| < TDOT_UNICODE : "\u2026" > //"â€¦"
}

TOKEN :
{
  < WHERE : "where" >
}

/* OPERATORS */

TOKEN :
{
  < EQ :
    "=="
  | < EQUALS_TO >
  | < IS_SAME_AS >
  | < IS_THE_SAME_AS > >
| < #EQUALS_TO : "equals" (< _WHITESPACE >)+ "to" >
| < #IS_SAME_AS : "is" (< _WHITESPACE >)+ "same" (< _WHITESPACE >)+ "as" >
| < #IS_THE_SAME_AS : "is" (< _WHITESPACE >)+ "the" (< _WHITESPACE >)+ "same" (< _WHITESPACE >)+ "as" >
}

TOKEN :
{
  < ASSIGN : "=" >
| < GT : ">" >
| < STRICT_GT : ">==" >
| < LT : "<" >
| < STRICT_LT : "<==" >
| < NOT :
    "!"
  | "not" >
| < HOOK : "?" >
| < COLON : ":" >
  //| < DOLLAR: "$" >
| < STRICT_EQ : "====" >
| < LE : "<=" >
| < STRICT_LE : "<===" >
| < GE : ">=" >
| < STRICT_GE : ">===" >
| < NE : "!=" >
| < NE_ALT : "<>" >
| < STRICT_NE : "!===" >
| < BOOL_OR :
    "||"
  | "or" >
| < BOOL_AND :
    "&&"
  | "and" >
| < INCR : "++" >
| < DECR : "--" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < REM : "%" >
| < PLUSASSIGN : "+=" >
| < MINUSASSIGN : "-=" >
| < STARASSIGN : "*=" >
| < SLASHASSIGN : "/=" >
| < EXP : "**" >
| < IMPL : "->" >
| < STRING_LE : "string<=" >
| < STRING_LT : "string<" >
| < STRING_GE : "string>=" >
| < STRING_GT : "string>" >
| < STRING_EQ : "string==" >
| < STRING_NE : "string!=" >
| < STRING_NE_ALT : "string<>" >
}

TOKEN :
{
  < DOES_NOT_EQUAL_TO : "does" (< _WHITESPACE >)+ "not" (< _WHITESPACE >)+ "equal" (< _WHITESPACE >)+ "to" >
| < IS_DIFFERENT_FROM : "is" (< _WHITESPACE >)+ "different" (< _WHITESPACE >)+ "from" >
| < IS_LESS_THAN : "is" (< _WHITESPACE >)+ "less" (< _WHITESPACE >)+ "than" >
| < IS_MORE_THAN : "is" (< _WHITESPACE >)+ "more" (< _WHITESPACE >)+ "than" >
| < IS_LESS_OR_EQUAL : "is" (< _WHITESPACE >)+ "less" (< _WHITESPACE >)+ "or" (< _WHITESPACE >)+ "equal" >
| < IS_NO_MORE_THAN : "is" (< _WHITESPACE >)+ "no" (< _WHITESPACE >)+ "more" (< _WHITESPACE >)+ "than" >
| < IS_IN : "is" (< _WHITESPACE >)+ "in" >
| < IS_MORE_OR_EQUAL : "is" (< _WHITESPACE >)+ "more" (< _WHITESPACE >)+ "or" (< _WHITESPACE >)+ "equal" >
| < IS_NO_LESS_THAN : "is" (< _WHITESPACE >)+ "no" (< _WHITESPACE >)+ "less" (< _WHITESPACE >)+ "than" >
| < SELECT_ALL_HAVING : "select" (< _WHITESPACE >)+ "all" (< _WHITESPACE >)+ "having" >
| < SELECT_ALL_WHERE : "select" (< _WHITESPACE >)+ "all" (< _WHITESPACE >)+ "where" >
| < SELECT_FIRST_HAVING : "select" (< _WHITESPACE >)+ "first" (< _WHITESPACE >)+ "having" >
| < SELECT_FIRST_WHERE : "select" (< _WHITESPACE >)+ "first" (< _WHITESPACE >)+ "where" >
| < ORDER_BY : "order" (< _WHITESPACE >)+ "by" >
| < ORDER_INCREASING_BY : "order" (< _WHITESPACE >)+ "increasing" (< _WHITESPACE >)+ "by" >
| < ORDER_DECREASING_BY : "order" (< _WHITESPACE >)+ "decreasing" (< _WHITESPACE >)+ "by" >
| < SPLIT_BY : "split" (< _WHITESPACE >)+ "by" >
| < TRANSFORM_TO : "transform" (< _WHITESPACE >)+ "to" >
| < TRANSFORM_UNIQUE_TO : "transform" (< _WHITESPACE >)+ "unique" (< _WHITESPACE >)+ "to" >
| < LESS_THAN : "less" (< _WHITESPACE >)+ "than" >
| < MORE_THAN : "more" (< _WHITESPACE >)+ "than" >
| < OR_LESS : "or" (< _WHITESPACE >)+ "less" >
| < AND_MORE : "and" (< _WHITESPACE >)+ "more" >
}

/* JAVA LITERALS */

TOKEN :
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
  >
| 
  < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| 
  < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| 
  < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
| 
  < #FP_LITERAL1 :
    ([ "0"-"9" ])+
    (
      "." ([ "0"-"9" ])+
    )? >
| 
  < #FP_LITERAL2 :
    [ "1"-"9" ] ([ "0"-"9" ])? ([ "0"-"9" ])? ("," [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ])+
    (
      "." ([ "0"-"9" ])+
    )? >
| 
  < FLOATING_POINT_LITERAL :
    (
      ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
    | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
    | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?
    | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ]
    ) 
  >
| 
  < BUSINESS_INTEGER_LITERAL :
    ("$")? 	< FP_LITERAL1 > ([ "M", "K", "B" ])?
  | 
    ("$")? 	< FP_LITERAL2 > ([ "M", "K", "B" ])? 
  >
| 
  < DATE_FORMAT_LITERAL :
    [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ] "-" [ "0"-"9" ] [ "0"-"9" ] "-" [ "0"-"9" ] [ "0"-"9" ] 
  >
| 
  < TIME_FORMAT_LITERAL :
    [ "0"-"9" ] [ "0"-"9" ] ":" [ "0"-"9" ] [ "0"-"9" ]
    (
      ":" [ "0"-"9" ] [ "0"-"9" ] ("." [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ])?
    )? 
  >
|
  < DATETIME_FORMAT_LITERAL :
    < DATE_FORMAT_LITERAL > (<_WHITESPACE> )+ < TIME_FORMAT_LITERAL >
  >
|
  < PERCENT_LITERAL : 
    ([ "0"-"9" ])+ ("." [ "0"-"9" ] [ "0"-"9" ])? "%" 		
  >
| 
  < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
| 
  < CHARACTER_LITERAL :
    "'"
    (
      (~[ "'", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        | "u"
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          | [ "A"-"F" ]
          )
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          | [ "A"-"F" ]
          )
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          | [ "A"-"F" ]
          )
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          | [ "A"-"F" ]
          )
        )
      )
    )
    "'" 
  >
| 
  < STRING_LITERAL :
    "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        | "u"
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          | [ "A"-"F" ]
          )
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          | [ "A"-"F" ]
          )
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          | [ "A"-"F" ]
          )
          (
            [ "0"-"9" ]
          | [ "a"-"f" ]
          | [ "A"-"F" ]
          )
        )
      )
    )*
    "\"" 
  >
}

/* IDENTIFIERS */

< DEFAULT, REF_IDENTIFIER >
TOKEN :
{
  < IDENTIFIER :
    ("`" < ANY >
    (< ANY >)*) "`"
    |
    (< LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* ) >
  : DEFAULT
| 
  < #LETTER : 
    [ 
    "$",
    "A"-"Z",
    "_", 
    "a"-"z", 
    "\u00c0"-"\u00d6", 
    "\u00d8"-"\u00f6", 
    "\u00f8"-"\u00ff", 
    "\u0100"-"\u1fff", 
    "\u3040"-"\u318f", 
    "\u3300"-"\u337f", 
    "\u3400"-"\u3d2d", 
    "\u4e00"-"\u9fff", 
    "\uf900"-"\ufaff" 
    ] 
  >
| 
  < #DIGIT : 
    [ 
    "0"-"9", 
    "\u0660"-"\u0669", 
    "\u06f0"-"\u06f9", 
    "\u0966"-"\u096f", 
    "\u09e6"-"\u09ef", 
    "\u0a66"-"\u0a6f", 
    "\u0ae6"-"\u0aef", 
    "\u0b66"-"\u0b6f", 
    "\u0be7"-"\u0bef", 
    "\u0c66"-"\u0c6f", 
    "\u0ce6"-"\u0cef", 
    "\u0d66"-"\u0d6f", 
    "\u0e50"-"\u0e59", 
    "\u0ed0"-"\u0ed9", 
    "\u1040"-"\u1049" 
    ] 
  >
|
  < #ANY : ~[ "`" ] >
}

TOKEN :
{
  < RANGE_VARIABLE : "$" < IDENTIFIER > ":$" < IDENTIFIER > >
}

/* COMMENTS */

MORE :
{
  //  "//" : IN_SINGLE_LINE_COMMENT
  //|
  < "/**" ~[ "/" ] >
  {
    input_stream.backup(1);
  }
  : IN_FORMAL_COMMENT
| 
  "/*" : IN_MULTI_LINE_COMMENT
}

//<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT :
    "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    )? >
}

< IN_FORMAL_COMMENT >
SPECIAL_TOKEN :
{
  < FORMAL_COMMENT : "*/" > : DEFAULT
}

< IN_MULTI_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
}

//<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
< IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT >
MORE :
{
  < ~[ ] >
}

/*
 * Expression syntax follows.
 */

void Expression() :
{ String func; }
{
  TernaryExpression()
  [
    (
      < ASSIGN >      { func = "op.assign"; }
    | < PLUSASSIGN >  { func = "op.assign.add"; }
    | < MINUSASSIGN > { func = "op.assign.subtract"; }
    | < STARASSIGN >  { func = "op.assign.multiply"; }
    | < SLASHASSIGN > { func = "op.assign.divide"; }
    )
    Expression() { bop(func, pos(token)); }
  ]
}

void TernaryExpression() :
{ int x=0; }
{
  OrExpression()
  [
    < HOOK > TernaryExpression() [ < COLON > TernaryExpression() {++x;} ] { nop("op.ternary.qmark", pos(token), 2 + x);}
  ]
}

void OrExpression() :
{}
{
  AndExpression() ( < BOOL_OR > AndExpression() { bop("op.binary.or", pos(token)); } )*
}

void AndExpression() :
{}
{
  EqualityExpression() ( < BOOL_AND > EqualityExpression() { bop("op.binary.and", pos(token)); } )*
}

void EqualityExpression() :
{ String func; }
{
  RelationalExpression()
  (
    (
      < EQ >                { func = "op.binary.eq"; }
    | < NE >                { func = "op.binary.ne"; }
    | < NE_ALT >            { func = "op.binary.ne"; }
    | < DOES_NOT_EQUAL_TO > { func = "op.binary.ne"; }
    | < IS_DIFFERENT_FROM > { func = "op.binary.ne"; }
    | < STRICT_EQ >         { func = "op.binary.strict_eq"; }
    | < STRICT_NE >         { func = "op.binary.strict_ne"; }
    | < STRING_EQ >         { func = "op.binary.string_eq"; }
    | < STRING_NE >         { func = "op.binary.string_ne"; }
    | < STRING_NE_ALT >     { func = "op.binary.string_ne"; }
    )
  RelationalExpression()  { bop(func, pos(token)); }
  )*
}

void RelationalExpression() :
{ String func; }
{
  AdditiveExpression()
  (
    (
      < LT >                { func = "op.binary.lt"; }
    | < IS_LESS_THAN >      { func = "op.binary.lt"; }
    | < GT >                { func = "op.binary.gt"; }
    | < IS_MORE_THAN >      { func = "op.binary.gt"; }
    | < LE >                { func = "op.binary.le"; }
    | < IS_LESS_OR_EQUAL >  { func = "op.binary.le"; }
    | < IS_NO_MORE_THAN >   { func = "op.binary.le"; }
    | < IS_IN >             { func = "op.binary.le"; }
    | < GE >                { func = "op.binary.ge"; }
    | < IS_MORE_OR_EQUAL >  { func = "op.binary.ge"; }
    | < IS_NO_LESS_THAN >   { func = "op.binary.ge"; }
    | < STRICT_GT >         { func = "op.binary.strict_gt"; }
    | < STRICT_GE >         { func = "op.binary.strict_ge"; }
    | < STRICT_LT >         { func = "op.binary.strict_lt"; }
    | < STRICT_LE >         { func = "op.binary.strict_le"; }
    | < STRING_LE >         { func = "op.binary.string_le"; }
    | < STRING_LT >         { func = "op.binary.string_lt"; }
    | < STRING_GE >         { func = "op.binary.string_ge"; }
    | < STRING_GT >         { func = "op.binary.string_gt"; }
    )
    AdditiveExpression() { bop(func, pos(token)); }
  )*
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression()
  (
    < PLUS > MultiplicativeExpression() { bop("op.binary.add", pos(token)); }
  | < MINUS > MultiplicativeExpression() { bop("op.binary.subtract", pos(token)); }
  )*
}

void MultiplicativeExpression() :
{}
{
  PowerExpression()
  (
    < STAR >  PowerExpression()  { bop("op.binary.multiply", pos(token)); }
  | < SLASH > PowerExpression()  { bop("op.binary.divide", pos(token)); }
  | < REM >   PowerExpression()  { bop("op.binary.rem", pos(token)); }
  )*
}

void PowerExpression() :
{}
{
  UnaryExpression()
  (
    LOOKAHEAD(< EXP >) < EXP > UnaryExpression()  { bop("op.binary.pow", pos(token)); }
  )*
}

void UnaryExpression() :
{}
{
  < PLUS > UnaryExpression()   { uop("op.unary.positive", pos(token));  }
| < MINUS > UnaryExpression()  { uop("op.unary.negative", pos(token));  }
| < NOT > UnaryExpression()    { uop("op.unary.not", pos(token));  }
| < INCR > PrimaryExpression() { uop("op.prefix.inc", pos(token)); }
| < DECR > PrimaryExpression() { uop("op.prefix.dec", pos(token)); }
| LOOKAHEAD(CastLookahead())  CastExpression()
| PostfixExpression()
}

void OfTheExpressionSuffix() :
{}
{
  < OF_THE > PrimaryExpression() { bop("chain.suffix.of.the", null); }
}

void PostfixExpression() :
{}
{
  PrimaryExpression()
  [
    < INCR > { uop("op.suffix.inc", pos(token)); }
  | < DECR > { uop("op.suffix.dec", pos(token)); }
  ]
}

void PrimaryExpression() :
{ boolean hasSuffix = false; }
{
  PrimaryPrefix()
  (
    LOOKAHEAD(2) PrimarySuffix() { hasSuffix = true;  }
  )*
  { if (hasSuffix) uop("chain", null); }
}

void PrimaryPrefix() :
{}
{
  CommaSeparatedList()
| Literal()
| < LPAREN > Expression() < RPAREN >
| AllocationExpression()
| LOOKAHEAD(function()) function()
| LOOKAHEAD(2) rangeidentifier()
| IdentifierSequence()
}

void IdentifierSequence() :
{ int args = 1;}
{
  identifier()
  (
    < IDENTIFIER > { identifier("identifier.sequence.element", pos(token), token.image); ++args; }
  )*
  { if (args > 1) nop("identifier.sequence", null, args); }
}

void Word(String type) :
{}
{
  < IDENTIFIER > { identifier(type, pos(token), token.image); }
}

void PrimarySuffix() :
{}
{
  IndexOperator() { bop("chain.suffix.dot.index", null); }
| LOOKAHEAD(< DOT_OPERATOR > function()) < DOT_OPERATOR > function() { bop("chain.suffix.dot.function", null); }
| LOOKAHEAD(OfTheExpressionSuffix()) OfTheExpressionSuffix()
| LOOKAHEAD(< DOT_OPERATOR > identifier()) < DOT_OPERATOR > identifier() { bop("chain.suffix.dot.identifier", null); }
}

void CastExpression() :
{ Token x1, x2; }
{
  x1 = < LPAREN > Type() x2 = < RPAREN > UnaryExpression() { bop("type.cast", pos(x1, x2)); }
}

void CastLookahead() :
{}
{
  < LPAREN > Type() < RPAREN >
  (
    < PLUS >
  | < MINUS >
  | < NOT >
  | < LPAREN >
  | < LBRACKET >
  | < IDENTIFIER >
  | < NEW >
  | Literal()
  )
}

void identifier() :
{}
{
   Word("identifier")
}

void rangeidentifier() :
{}
{
  < RANGE_VARIABLE >
  { identifier("range.variable", pos(token), token.image); }
}

void TypeDimension() :
{ Token x1, x2; }
{
  x1 = < LBRACKET > x2 = < RBRACKET > { uop("type.index", pos(x1, x2)); }
}

void Type() :
{}
{
  ( LOOKAHEAD(CombinedType()) CombinedType()
  | LOOKAHEAD(ClassName()) ClassName()
  )
  (
    TypeDimension()
  )*
  { uop("type.declaration", null); }
}

void ResultType() :
{}
{
  < VOID > { identifier("type.name", pos(token), token.image); uop("type.declaration", null); }
| Type()
}

void ClassName() :
{ String name; Token x1, x2; }
{
  x1 = < IDENTIFIER > { name = token.image; x2 = x1; }
  (
    LOOKAHEAD(2) < DOT_OPERATOR > x2 = < IDENTIFIER > { name = name + "." + token.image; }
  )*
  { identifier("type.name", pos(x1, x2), name); }
}

void CombinedType() :
{ int count = 1; }
{
  ClassName()
  (
    < AMPERSAND > ClassName() { count++; }
  )+
  { nop("combined.type.name", null, count); }
}

void CommaSeparatedList() :
{ int elements = 0, words = 0; }
{
  < LBRACKET >
  (
    Word("identifier.list") { ++words; }
  )+
  { nop("list.element", null, words); ++elements; }
  (
    < COMMA > { words = 0; }
    (
      Word("identifier.list") { ++words; }
    )+
    { nop("list.element", null, words); ++elements; }
  )*
  < RBRACKET > { nop("list", null, elements); }
}

void function() :
{ String funcname; int args = 0; Token x1, x2; }
{
  x1 = < IDENTIFIER > { funcname = token.image; }
  < LPAREN >
  [
    VariableInitializer() { args++; }
    (
      < COMMA > VariableInitializer() { args++; }
    )*
  ]
  x2 = < RPAREN > { identifier("funcname", pos(x1), funcname); nop("function", pos(x1, x2), args + 1); }
}

void AllocationExpression() :
{ int args = 0; Token x1, x2; }
{
  x1 = < NEW > ClassName()
  (
    < LPAREN >
    [
      Expression() { args++; }
      (
        < COMMA > Expression() { args++; }
      )*
    ]
    x2 = < RPAREN > { nop("op.new.object", pos(x1, x2), args + 1); }
  | ArrayDimsAndInits() { uop("op.new.array", pos(x1)); }
  )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{ Token x1, x2; int cnt = 0; }
{
  LOOKAHEAD(2)
  (
    LOOKAHEAD(2) x1 = < LBRACKET > Expression() x2 = < RBRACKET > { bop("array.index.expression", pos(x1, x2)); cnt++; }
  )+
  (
    LOOKAHEAD(2) x1 = < LBRACKET > x2 = < RBRACKET > { uop("array.index.empty", pos(x1, x2)); }
  )*
|
  (
    TypeDimension()
  )+
  ArrayInitializer() { bop("new.array.initialized", null); }
}

void IndexTypeExpression() :
{ Token x1, x2; }
{
  LOOKAHEAD(3) x1 = < LPAREN > Type() VariableDeclaratorId() x2 = < RPAREN > { nop("index.parameter.declaration", pos(x1, x2), 2); }
| LOOKAHEAD(3) x1 = < LPAREN > VariableDeclaratorId() x2 = < RPAREN > { nop("index.parameter.declaration", pos(x1, x2), 1); }
}

void IndexOperator() :
{ Token x1, x2; boolean hasTypeExpression = false; String prefix = "op.index"; }
{
    x1 = < LBRACKET >
    [
      LOOKAHEAD(4)

      [
        IndexTypeExpression() { hasTypeExpression = true; }
      ]
      (
        "@"                     { prefix = "selectall.index"; }
      | < SELECT_ALL_HAVING >   { prefix = "selectall.index"; }
      | < SELECT_ALL_WHERE >    { prefix = "selectall.index"; }
      | "!@"                    { prefix = "selectfirst.index"; }
      | < SELECT_FIRST_HAVING > { prefix = "selectfirst.index"; }
      | < SELECT_FIRST_WHERE >  { prefix = "selectfirst.index"; }
      | "^@"                    { prefix = "orderby.index"; }
      | < ORDER_BY >            { prefix = "orderby.index"; }
      | < ORDER_INCREASING_BY > { prefix = "orderby.index"; }
      | "v@"                    { prefix = "orderdecreasingby.index"; }
      | < ORDER_DECREASING_BY > { prefix = "orderdecreasingby.index"; }
      | "~@"                    { prefix = "splitby.index"; }
      | "s@"                    { prefix = "splitby.index"; }
      | < SPLIT_BY >            { prefix = "splitby.index"; }
      | "*@"                    { prefix = "transform.index"; }
      | < TRANSFORM_TO >        { prefix = "transform.index"; }
      | "*!@"                   { prefix = "transformunique.index"; }
      | < TRANSFORM_UNIQUE_TO > { prefix = "transformunique.index"; }
      )
    ]
    Expression()
    x2 = < RBRACKET >
    {
      if (hasTypeExpression)
      {
        nop(prefix, pos(x1, x2), 2);
      } else {
        uop(prefix, pos(x1, x2));
      }
    }
}

void Literal() :
{}
{
  < INTEGER_LITERAL >          { literal("literal.integer", pos(token), token.image); }
| < BUSINESS_INTEGER_LITERAL > { literal("literal.integer.business", pos(token), token.image); }
| < PERCENT_LITERAL >          { literal("literal.percent", pos(token), token.image); }
| < FLOATING_POINT_LITERAL >   { literal("literal.real", pos(token), token.image); }
| < STRING_LITERAL >           { literal("literal.string", pos(token), token.image); }
| < CHARACTER_LITERAL >        { literal("literal.char", pos(token), token.image); }
| < TRUE >                     { literal("literal.bool", pos(token), token.image); }
| < FALSE >                    { literal("literal.bool", pos(token), token.image); }
| < NULL >                     { literal("literal.null", pos(token), token.image); }
| LOOKAHEAD(DateTimeLiteral()) DateTimeLiteral()
| < DATE_FORMAT_LITERAL >      { literal("literal.date", pos(token), token.image); }
| < TIME_FORMAT_LITERAL >      { literal("literal.time", pos(token), token.image); }
}

void DateTimeLiteral() :
{}
{
  < DATETIME_FORMAT_LITERAL > { literal("literal.datetime", pos(token), token.image); }
}

void Block() :
{}
{
  < LBRACE > BlockStatementList() < RBRACE >
}

void BlockStatementList() :
{ int args = 0; }
{
  (
    BlockStatement() { args++; }
  )*
  { nop("block.statement", null, args); }
}

void OptionalSemiColon() :
{}
{
  < SEMICOLON >
| < EOF >
}

void SemiColon() :
{}
{
  < SEMICOLON >
}

void Statement() :
{}
{
  LOOKAHEAD(2) LabeledStatement()
| Block()
| EmptyStatement()
| StatementExpression() OptionalSemiColon()
| IfStatement()
| WhileStatement()
| DoStatement()
| ForStatement()
| BreakStatement()
| ContinueStatement()
| ReturnStatement()
| ThrowStatement()
}

void ExtendedWhereStatement() :
{ int args = 1; }
{
  < COMMA > < WHERE > WhereVarExplanation()
  (
    LOOKAHEAD(2)
    < COMMA > WhereVarExplanation() { ++args; }
  )*
  { nop("where.explanation", null, args); }
}

void WhereVarExplanation() :
{}
{
  Word("identifier.var.explanation") "-" Expression() { bop("where.var.explanation", null); }
}

void LabeledStatement() :
{ String label; }
{
  < IDENTIFIER > { label = token.image; }
  < COLON > { notImplemented("startLabel(label)"); }
  Statement() { notImplemented("endLabel()"); }
}

void BlockStatement() :
{}
{
  LOOKAHEAD(Type() < IDENTIFIER > < ASSIGN >)    LocalVariableDeclaration() SemiColon()
| LOOKAHEAD(Type() < IDENTIFIER > < SEMICOLON >) LocalVariableDeclaration() SemiColon()
| LOOKAHEAD(Type() < IDENTIFIER > < COMMA >)     LocalVariableDeclaration() SemiColon()
| Statement()
}

void StatementExpression() :
{}
{
  Expression()
  [
    LOOKAHEAD(2) ExtendedWhereStatement() { bop("where.expression", null); }
  ]
}

void EmptyStatement() :
{}
{
  < SEMICOLON > { emptyStatement(token.image, pos(token)); }
}

void IfStatement() :
{ int nodes = 2; }
{
  < IF > < LPAREN > Expression() < RPAREN > Statement()
  [
    LOOKAHEAD(1) < ELSE > Statement() { ++nodes; }
  ]
  { nop("control.if", pos(token), nodes); }
}

void WhileStatement() :
{}
{
  < WHILE > < LPAREN > Expression() < RPAREN > Statement() { bop("control.while", pos(token)); }
}

void ReturnStatement() :
{ int args = 0; }
{
  < RETURN >
  [
    VariableInitializer() { ++args; }
  ]
  < SEMICOLON >
  { nop("control.return", pos(token), args); }
}

void ThrowStatement() :
{}
{
  < THROW > Expression() < SEMICOLON >
}

void DoStatement() :
{}
{
  { notImplemented("startLabel(null)"); } // anonymous label for cycles
  < DO > Statement() < WHILE > < LPAREN > Expression() < RPAREN > OptionalSemiColon()
  { notImplemented("doStatement()"); }
  { notImplemented("endLabel()"); }
}

void LocalVariableDeclaration() :
{ int args = 0; }
{
  Type() VariableDeclarator() { args++; }
  (
    < COMMA > VariableDeclarator() { args++; }
  )*
  { nop("local.var.declaration", null, args + 1); }
}

void VariableDeclarator() :
{ boolean withInitializer = false; }
{
  VariableDeclaratorId()
  [
    < ASSIGN > VariableInitializer() { withInitializer = true; }
  ]
  { if (withInitializer) bop("local.var.name.init", null); }
}

void VariableDeclaratorId() :
{}
{
  identifier()
  (
    TypeDimension()
  )*
}

void VariableInitializer() :
{}
{
  ArrayInitializer()
| Expression()
}

void ArrayInitializer() :
{ int args = 0; Token x1, x2; }
{
  x1 = < LBRACE >
  [
    VariableInitializer() { args++; }
    (
      LOOKAHEAD(2)
      < COMMA > VariableInitializer() { args++; }
    )*
  ]
  [ < COMMA > ]
  x2 = < RBRACE > { nop("array.init", pos(x1, x2), args); }
}

void ForStatement() :
{
  boolean [ ] bParts = new boolean [ 4 ];
  Token x;
}
{
  x = < FOR > < LPAREN >
  [ ForInit() { bParts [ 0 ] = true; } ] < SEMICOLON >
  [ Expression() { bParts [ 1 ] = true; } ] < SEMICOLON >
  [ StatementExpressionList() { bParts [ 2 ] = true; } ] < RPAREN >
  Statement() { bParts [ 3 ] = true; }
  { nop("control.for", pos(x), bParts); }
}

void ForInit() :
{}
{
  LOOKAHEAD(Type() < IDENTIFIER >) LocalVariableDeclaration()
| StatementExpressionList()
}

void StatementExpressionList() :
{ int args = 0; }
{
  StatementExpression() { args++; }
  (
    < COMMA > StatementExpression() { args++; }
  )*
  { if (args > 1) nop("statement_list", null, args); }
}

void BreakStatement() :
{ String label = null; }
{
  < BREAK >
  [
    < IDENTIFIER > { label = token.image; }
  ]
  OptionalSemiColon() { notImplemented("doBreak(label)"); }
}

void ContinueStatement() :
{ String label = null; }
{
  < CONTINUE >
  [
    < IDENTIFIER > { label = token.image; }
  ]
  OptionalSemiColon() { notImplemented("doContinue(label)"); }
}

void MethodHeader() :
{}
{
  ResultType() MethodDeclarator() { nop("method.header", null, 3); }
}

void MethodDeclaration() :
{}
{
  ResultType() MethodDeclarator()
  (
    Block() { nop("method.declaration", null, 4); }
  | < SEMICOLON >
  )
}

void MethodDeclarator() :
{}
{
  MethodName() FormalParameters() //( "[" "]" )*
}

void MethodName() :
{}
{
  identifier()
}

void FormalParameters() :
{ int args = 0; Token x1, x2; }
{
  x1 = < LPAREN >
  [
    FormalParameter() { ++args; }
    (
      < COMMA > FormalParameter() { ++args; }
    )*
  ]
  x2 = < RPAREN > { nop("method.parameters", pos(x1, x2), args); }
}

void FormalParameter() :
{ int count = 2; }
{
  Type() VariableDeclaratorId()
  (
    ParameterMetaData() { ++count; }
  )?
  { nop("parameter.declaration", null, count); }
}

void ParameterMetaData() :
{}
{
  ":" identifier() "." identifier() { nop("parameter.meta.declaration", null, 2); }
}

void VarDeclaration() :
{}
{
  LocalVariableDeclaration() < SEMICOLON > { uop("var.declaration", null); }
}

void MethodOrVarDeclaration() :
{}
{
  LOOKAHEAD(ResultType() MethodDeclarator()) MethodDeclaration()
| VarDeclaration()
}

void parseModuleInternal() :
{ int nMethods = 1; }
{
  MethodOrVarDeclaration()
  (
    MethodOrVarDeclaration() { ++nMethods; }
  )*
  { if (nMethods > 0) nop("module.top", null, nMethods); }
  < EOF >
}

void parseTopNodeInternal() :
{}
{
  BlockStatementList() { uop("block.top", null); }
  < EOF >
}

void parseParamDeclaration() :
{ int args = 1; }
{
  ResultType() [ VariableDeclaratorId() { ++args; } ]
  { nop("param.declaration", null, args); }
  < EOF >
}

void parseType() :
{}
{
  ResultType() < EOF >
}

void parseMethodHeader() :
{}
{
  MethodHeader()  < EOF >
}
