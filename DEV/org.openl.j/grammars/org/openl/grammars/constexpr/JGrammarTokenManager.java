/* Generated By:JavaCC: Do not edit this line. JGrammarTokenManager.java */
package org.openl.grammars.constexpr;

public class JGrammarTokenManager implements JGrammarConstants
{
  // CommonTokenAction: use the begins/ends fields added to the Jack
  // CharStream class to set corresponding fields in each Token (which was
  // also extended with new fields). By default Jack doesn't supply absolute
  // offsets, just line/column offsets
  void CommonTokenAction(Token t)
  {
//    t.beginsAt = input_stream.beginOffset;
//    t.endsAt = input_stream.endOffset;
//    throw new RuntimeException("Define CommonTokenAction");
/*
    org.openl.util.Log.debug(
      "Token = <"
        + t.image
        + "> "
        + "("
        + t.beginLine
        + ","
        + t.beginColumn
        + ")-("
        + t.endLine
        + ","
        + t.endColumn
        + ")"
        + " "
        + t.kind
        + " = "
        + JGrammarConstants.tokenImage[t.kind]);
*/

  }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3fffffffffc0L) != 0L)
         {
            jjmatchedKind = 103;
            return 33;
         }
         if ((active1 & 0x80000100200L) != 0L)
            return 60;
         if ((active0 & 0x40000000000000L) != 0L)
            return 4;
         return -1;
      case 1:
         if ((active1 & 0x80000000000L) != 0L)
            return 58;
         if ((active0 & 0x3fffffdfdfc0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 33;
         }
         if ((active0 & 0x202000L) != 0L)
            return 33;
         return -1;
      case 2:
         if ((active0 & 0x40008080000L) != 0L)
            return 33;
         if ((active0 & 0x3bfff7d7dfc0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 2;
            }
            return 33;
         }
         return -1;
      case 3:
         if ((active0 & 0x31ffe7c79ec0L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 3;
            return 33;
         }
         if ((active0 & 0xa0010104100L) != 0L)
            return 33;
         return -1;
      case 4:
         if ((active0 & 0x1137e7c09840L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 4;
            }
            return 33;
         }
         if ((active0 & 0x20c800070680L) != 0L)
            return 33;
         return -1;
      case 5:
         if ((active0 & 0x9704800000L) != 0L)
            return 33;
         if ((active0 & 0x1120e3449840L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
            return 33;
         }
         return -1;
      case 6:
         if ((active0 & 0x60049000L) != 0L)
            return 33;
         if ((active0 & 0x112083400840L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 6;
            return 33;
         }
         return -1;
      case 7:
         if ((active0 & 0x12083400000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 7;
            return 33;
         }
         if ((active0 & 0x100000000840L) != 0L)
            return 33;
         return -1;
      case 8:
         if ((active0 & 0x10082000000L) != 0L)
            return 33;
         if ((active0 & 0x2001400000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 8;
            return 33;
         }
         return -1;
      case 9:
         if ((active0 & 0x1400000L) != 0L)
            return 33;
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 9;
            return 33;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 10;
            return 33;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 37:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 38:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200008L);
      case 40:
         return jjStopAtPos(0, 46);
      case 41:
         return jjStopAtPos(0, 47);
      case 42:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10080000L);
      case 43:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20010L);
      case 44:
         return jjStopAtPos(0, 53);
      case 45:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20040020L);
      case 46:
         return jjStartNfaWithStates_0(0, 54, 4);
      case 47:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000100000L);
      case 58:
         return jjStopAtPos(0, 61);
      case 59:
         return jjStopAtPos(0, 52);
      case 60:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x2004000L);
      case 61:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc018001L);
      case 63:
         return jjStopAtPos(0, 60);
      case 91:
         return jjStopAtPos(0, 50);
      case 93:
         return jjStopAtPos(0, 51);
      case 94:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xf00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xf0000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3e00000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1c000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e0000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3c00000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x7c000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 48);
      case 124:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400004L);
      case 125:
         return jjStopAtPos(0, 49);
      case 126:
         return jjStopAtPos(0, 59);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 42:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 107, 58);
         break;
      case 43:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 45:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 60:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L);
      case 61:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         break;
      case 62:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc010000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x24010300L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x208001000L, active1, 0L);
      case 102:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 33);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20c000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 33);
         return jjMoveStringLiteralDfa2_0(active0, 0x180000180c00L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x700c0000080L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x910000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 90);
         break;
      case 62:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10400000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x281040000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100010010000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000060c00L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800c00000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1004140L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x206108200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 33);
         break;
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(3, 91);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000061080L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000200L, active1, 0L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 33);
         break;
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 33);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 33);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x802008000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0x200100400000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 33);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000800000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1481000840L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x61000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 33);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x80400000L);
      case 104:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000800L);
      case 107:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 33);
         break;
      case 108:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x202800040L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 33);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 119:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 99:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 33);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 104:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 33);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x110000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x41000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000800L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 33);
         break;
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 33);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000040L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 33);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000400000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 33);
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 121:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 33);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 33);
         return jjMoveStringLiteralDfa8_0(active0, 0x81000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x12000400000L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 6, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 33);
         break;
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 33);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 33);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 33);
         break;
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 33);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 37, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 66;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if (curChar == 47)
                     jjAddStates(9, 10);
                  else if (curChar == 36)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(33);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 39)
                     jjAddStates(14, 15);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 94)
                        kind = 94;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 94)
                        kind = 94;
                     jjCheckNAddStates(16, 18);
                  }
                  break;
               case 60:
                  if (curChar == 47)
                  {
                     if (kind > 108)
                        kind = 108;
                     jjCheckNAddStates(19, 21);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddStates(22, 24);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(14, 15);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 101)
                     kind = 101;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 22:
                  if (curChar == 34 && kind > 102)
                     kind = 102;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 32:
                  if (curChar != 36)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if (curChar != 48)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddStates(16, 18);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddTwoStates(36, 2);
                  break;
               case 37:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddTwoStates(37, 2);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar != 46)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddStates(29, 31);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddStates(29, 31);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddTwoStates(44, 8);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddTwoStates(48, 8);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 51:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 8);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar != 46)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if (curChar == 47)
                     jjAddStates(9, 10);
                  break;
               case 58:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 61:
                  if (curChar != 47)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddStates(19, 21);
                  break;
               case 62:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddStates(19, 21);
                  break;
               case 63:
                  if ((0x2400L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 64:
                  if (curChar == 10 && kind > 108)
                     kind = 108;
                  break;
               case 65:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(33);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 94)
                     kind = 94;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 98)
                     kind = 98;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(37, 39);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(40, 43);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 27:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e00000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 35:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddTwoStates(36, 2);
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 56:
                  if ((0x2804L & l) != 0L && kind > 99)
                     kind = 99;
                  break;
               case 59:
                  if (kind > 106)
                     kind = 106;
                  break;
               case 62:
                  if (kind > 108)
                     kind = 108;
                  jjAddStates(19, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 33:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(33);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 13);
                  break;
               case 59:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 106)
                     kind = 106;
                  break;
               case 62:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjAddStates(19, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 66 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x200000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   39, 40, 45, 46, 49, 50, 8, 53, 54, 60, 61, 19, 20, 22, 10, 12, 
   35, 37, 2, 62, 63, 65, 4, 5, 8, 19, 20, 24, 22, 41, 42, 8, 
   49, 50, 8, 6, 7, 13, 14, 16, 21, 23, 25, 27, 43, 44, 47, 48, 
   51, 52, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\141\142\163\164\162\141\143\164", 
"\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\145\154\163\145", 
"\145\170\164\145\156\144\163", "\146\141\154\163\145", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\157\162", "\147\157\164\157", "\151\146", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164\145\162\146\141\143\145", "\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", 
"\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", 
"\160\165\142\154\151\143", "\162\145\164\165\162\156", "\163\164\141\164\151\143", 
"\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", "\50", "\51", "\173", "\175", "\133", "\135", "\73", 
"\54", "\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", "\53\75", 
"\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", 
"\76\76\75", "\76\76\76\75", "\52\52", "\55\76", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 1, 2, -1, 0, 0, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xec7fffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x700000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x700000000000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x8c0000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[66];
private final int[] jjstateSet = new int[132];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public JGrammarTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public JGrammarTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 66; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 111)
         {
            jjmatchedKind = 111;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 111)
         {
            jjmatchedKind = 111;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 106 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
