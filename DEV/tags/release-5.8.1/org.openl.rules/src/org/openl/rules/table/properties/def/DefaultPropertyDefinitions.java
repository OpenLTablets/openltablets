package org.openl.rules.table.properties.def;

import org.openl.rules.lang.xls.XlsNodeTypes;
import org.openl.rules.table.properties.def.TablePropertyDefinition.SystemValuePolicy;
import org.openl.rules.table.properties.inherit.InheritanceLevel;

/**
 * Definitions of supported properties.
 * @author snshor
 * Created Jul 21, 2009 
 *
 */
public class DefaultPropertyDefinitions 
{
    private static final TablePropertyDefinition[] definitions;  
    
    static {  
        // <<< INSERT TablePropertiesDefinition >>>
		definitions = new TablePropertyDefinition[29];
		definitions[0] = new TablePropertyDefinition();
		definitions[0].setBusinessSearch(true);
		definitions[0].setConstraints(new org.openl.rules.table.constraints.Constraints("unique in:module"));
		definitions[0].setDescription("The name of the table, should be unique");
		definitions[0].setDimensional(false);
		definitions[0].setDisplayName("Name");
		definitions[0].setGroup("Info");
		definitions[0].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[0].setName("name");
		definitions[0].setPrimaryKey(false);
		definitions[0].setSecurityFilter("no");
		definitions[0].setSystem(false);
		definitions[0].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String.class));
		definitions[1] = new TablePropertyDefinition();
		definitions[1].setBusinessSearch(true);
		definitions[1].setConstraints(new org.openl.rules.table.constraints.Constraints("no"));
		definitions[1].setDescription("The category of the table, could be two-level, in this case use format: <categor"
		 + "y> - <subcategory>");
		definitions[1].setDimensional(false);
		definitions[1].setDisplayName("Category");
		definitions[1].setGroup("Info");
		definitions[1].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[1].setName("category");
		definitions[1].setPrimaryKey(false);
		definitions[1].setSecurityFilter("yes (coma separated filter specification by user role: category/role pairs)");
		definitions[1].setSystem(false);
		definitions[1].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String.class));
		definitions[2] = new TablePropertyDefinition();
		definitions[2].setBusinessSearch(true);
		definitions[2].setConstraints(new org.openl.rules.table.constraints.Constraints("no"));
		definitions[2].setDescription("The description of the table component");
		definitions[2].setDimensional(false);
		definitions[2].setDisplayName("Description");
		definitions[2].setGroup("Info");
		definitions[2].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[2].setName("description");
		definitions[2].setPrimaryKey(false);
		definitions[2].setSecurityFilter("no");
		definitions[2].setSystem(false);
		definitions[2].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String.class));
		definitions[3] = new TablePropertyDefinition();
		definitions[3].setBusinessSearch(true);
		definitions[3].setConstraints(new org.openl.rules.table.constraints.Constraints("no"));
		definitions[3].setDescription("Add any number of comma-separated tags, could be used for search");
		definitions[3].setDimensional(false);
		definitions[3].setDisplayName("Tags");
		definitions[3].setGroup("Info");
		definitions[3].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[3].setName("tags");
		definitions[3].setPrimaryKey(false);
		definitions[3].setSecurityFilter("no");
		definitions[3].setSystem(false);
		definitions[3].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String[].class));
		definitions[4] = new TablePropertyDefinition();
		definitions[4].setBusinessSearch(true);
		definitions[4].setConstraints(new org.openl.rules.table.constraints.Constraints("< expirationDate"));
		definitions[4].setDescription("The table becomes active on effective date and inactive after the expiration dat"
		 + "e. You can have multiple instances of the same table in the same module with dif"
		 + "ferent effective/expiration date ranges");
		definitions[4].setDimensional(true);
		definitions[4].setDisplayName("Effective Date");
		definitions[4].setExpression(new org.openl.rules.table.properties.expressions.match.MatchingExpression("le(currentDate)"));
		definitions[4].setFormat("MM/dd/yyyy");
		definitions[4].setGroup("Business Dimension");
		definitions[4].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[4].setName("effectiveDate");
		definitions[4].setPrimaryKey(true);
		definitions[4].setSecurityFilter("no");
		definitions[4].setSystem(false);
		definitions[4].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.util.Date.class));
		definitions[5] = new TablePropertyDefinition();
		definitions[5].setBusinessSearch(true);
		definitions[5].setConstraints(new org.openl.rules.table.constraints.Constraints("> effectiveDate"));
		definitions[5].setDescription("The table becomes active on effective date and inactive after the expiration dat"
		 + "e. You can have multiple instances of the same table in the same module with dif"
		 + "ferent effective/expiration date");
		definitions[5].setDimensional(true);
		definitions[5].setDisplayName("Expiration Date");
		definitions[5].setExpression(new org.openl.rules.table.properties.expressions.match.MatchingExpression("ge(currentDate)"));
		definitions[5].setFormat("MM/dd/yyyy");
		definitions[5].setGroup("Business Dimension");
		definitions[5].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[5].setName("expirationDate");
		definitions[5].setPrimaryKey(false);
		definitions[5].setSecurityFilter("no");
		definitions[5].setSystem(false);
		definitions[5].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.util.Date.class));
		definitions[6] = new TablePropertyDefinition();
		definitions[6].setBusinessSearch(true);
		definitions[6].setConstraints(new org.openl.rules.table.constraints.Constraints("< endRequestDate"));
		definitions[6].setDescription("The date when rules become available in production, so the requests may be proce"
		 + "ssed by these rules");
		definitions[6].setDimensional(true);
		definitions[6].setDisplayName("Start Request Date");
		definitions[6].setExpression(new org.openl.rules.table.properties.expressions.match.MatchingExpression("max(le(requestDate))"));
		definitions[6].setFormat("MM/dd/yyyy");
		definitions[6].setGroup("Business Dimension");
		definitions[6].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[6].setName("startRequestDate");
		definitions[6].setPrimaryKey(true);
		definitions[6].setSecurityFilter("no");
		definitions[6].setSystem(false);
		definitions[6].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.util.Date.class));
		definitions[7] = new TablePropertyDefinition();
		definitions[7].setBusinessSearch(true);
		definitions[7].setConstraints(new org.openl.rules.table.constraints.Constraints("> startRequestDate"));
		definitions[7].setDescription("The last date when rules are available in production, so the requests can not be"
		 + " processed by these rules");
		definitions[7].setDimensional(true);
		definitions[7].setDisplayName("End Request Date");
		definitions[7].setExpression(new org.openl.rules.table.properties.expressions.match.MatchingExpression("min(ge(requestDate))"));
		definitions[7].setFormat("MM/dd/yyyy");
		definitions[7].setGroup("Business Dimension");
		definitions[7].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[7].setName("endRequestDate");
		definitions[7].setPrimaryKey(false);
		definitions[7].setSecurityFilter("no");
		definitions[7].setSystem(false);
		definitions[7].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.util.Date.class));
		definitions[8] = new TablePropertyDefinition();
		definitions[8].setBusinessSearch(true);
		definitions[8].setConstraints(new org.openl.rules.table.constraints.Constraints("no"));
		definitions[8].setDescription("User Name");
		definitions[8].setDimensional(false);
		definitions[8].setDisplayName("Created By");
		definitions[8].setGroup("Info");
		definitions[8].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[8].setName("createdBy");
		definitions[8].setPrimaryKey(false);
		definitions[8].setSecurityFilter("no");
		definitions[8].setSystem(true);
		definitions[8].setSystemValueDescriptor("currentUser");
		definitions[8].setSystemValuePolicy(SystemValuePolicy.IF_BLANK_ONLY);
		definitions[8].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String.class));
		definitions[9] = new TablePropertyDefinition();
		definitions[9].setBusinessSearch(true);
		definitions[9].setConstraints(new org.openl.rules.table.constraints.Constraints("no"));
		definitions[9].setDescription("The date of the table creation");
		definitions[9].setDimensional(false);
		definitions[9].setDisplayName("Created On");
		definitions[9].setFormat("MM/dd/yyyy");
		definitions[9].setGroup("Info");
		definitions[9].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[9].setName("createdOn");
		definitions[9].setPrimaryKey(false);
		definitions[9].setSecurityFilter("no");
		definitions[9].setSystem(true);
		definitions[9].setSystemValueDescriptor("currentDate");
		definitions[9].setSystemValuePolicy(SystemValuePolicy.IF_BLANK_ONLY);
		definitions[9].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.util.Date.class));
		definitions[10] = new TablePropertyDefinition();
		definitions[10].setBusinessSearch(false);
		definitions[10].setConstraints(new org.openl.rules.table.constraints.Constraints("no"));
		definitions[10].setDescription("User Name");
		definitions[10].setDimensional(false);
		definitions[10].setDisplayName("Modified By");
		definitions[10].setGroup("Info");
		definitions[10].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[10].setName("modifiedBy");
		definitions[10].setPrimaryKey(false);
		definitions[10].setSecurityFilter("no");
		definitions[10].setSystem(true);
		definitions[10].setSystemValueDescriptor("currentUser");
		definitions[10].setSystemValuePolicy(SystemValuePolicy.ON_EACH_EDIT);
		definitions[10].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String.class));
		definitions[11] = new TablePropertyDefinition();
		definitions[11].setBusinessSearch(false);
		definitions[11].setConstraints(new org.openl.rules.table.constraints.Constraints("no"));
		definitions[11].setDescription("The date of the last table modification");
		definitions[11].setDimensional(false);
		definitions[11].setDisplayName("Modified On");
		definitions[11].setFormat("MM/dd/yyyy");
		definitions[11].setGroup("Info");
		definitions[11].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[11].setName("modifiedOn");
		definitions[11].setPrimaryKey(false);
		definitions[11].setSecurityFilter("no");
		definitions[11].setSystem(true);
		definitions[11].setSystemValueDescriptor("currentDate");
		definitions[11].setSystemValuePolicy(SystemValuePolicy.ON_EACH_EDIT);
		definitions[11].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.util.Date.class));
		definitions[12] = new TablePropertyDefinition();
		definitions[12].setBusinessSearch(false);
		definitions[12].setConstraints(new org.openl.rules.table.constraints.Constraints("one of: common, vocabulary[N], main[N]"));
		definitions[12].setDescription("Used to manage dependencies between build phases");
		definitions[12].setDimensional(false);
		definitions[12].setDisplayName("Build Phase");
		definitions[12].setGroup("Dev");
		definitions[12].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[12].setName("buildPhase");
		definitions[12].setPrimaryKey(false);
		definitions[12].setSecurityFilter("no");
		definitions[12].setSystem(false);
		definitions[12].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String.class));
		definitions[13] = new TablePropertyDefinition();
		definitions[13].setBusinessSearch(false);
		definitions[13].setConstraints(new org.openl.rules.table.constraints.Constraints("one of: on, off, gaps, overlaps"));
		definitions[13].setDescription("Defines gap/overlap validation mode for Decision Table");
		definitions[13].setDimensional(false);
		definitions[13].setDisplayName("Validate DT");
		definitions[13].setGroup("Dev");
		definitions[13].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[13].setName("validateDT");
		definitions[13].setPrimaryKey(false);
		definitions[13].setSecurityFilter("no");
		definitions[13].setSystem(false);
		definitions[13].setTableType(new XlsNodeTypes[] {XlsNodeTypes.XLS_DT});
		definitions[13].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String.class));
		definitions[14] = new TablePropertyDefinition();
		definitions[14].setBusinessSearch(true);
		definitions[14].setConstraints(new org.openl.rules.table.constraints.Constraints("list: Defined by method getLob()"));
		definitions[14].setDescription("Defines the list of active LOBs for this table");
		definitions[14].setDimensional(true);
		definitions[14].setDisplayName("LOB");
		definitions[14].setExpression(new org.openl.rules.table.properties.expressions.match.MatchingExpression("eq(lob)"));
		definitions[14].setGroup("Business Dimension");
		definitions[14].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[14].setName("lob");
		definitions[14].setPrimaryKey(false);
		definitions[14].setSecurityFilter("yes (coma separated filter specification by user role: category/role pairs)");
		definitions[14].setSystem(false);
		definitions[14].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String.class));
		definitions[15] = new TablePropertyDefinition();
		definitions[15].setBusinessSearch(true);
		definitions[15].setConstraints(new org.openl.rules.table.constraints.Constraints("data: usRegions"));
		definitions[15].setDescription("US Region");
		definitions[15].setDimensional(true);
		definitions[15].setDisplayName("US Region");
		definitions[15].setExpression(new org.openl.rules.table.properties.expressions.match.MatchingExpression("contains(usRegion)"));
		definitions[15].setGroup("Business Dimension");
		definitions[15].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[15].setName("usregion");
		definitions[15].setPrimaryKey(false);
		definitions[15].setSecurityFilter("yes (coma separated filter specification by user role: category/role pairs)");
		definitions[15].setSystem(false);
		definitions[15].setType(org.openl.types.java.JavaOpenClass.getOpenClass(org.openl.rules.enumeration.UsRegionsEnum[].class));
		definitions[16] = new TablePropertyDefinition();
		definitions[16].setBusinessSearch(false);
		definitions[16].setConstraints(new org.openl.rules.table.constraints.Constraints("data: countries"));
		definitions[16].setDescription("Country");
		definitions[16].setDimensional(true);
		definitions[16].setDisplayName("Countries");
		definitions[16].setExpression(new org.openl.rules.table.properties.expressions.match.MatchingExpression("contains(country)"));
		definitions[16].setGroup("Business Dimension");
		definitions[16].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[16].setName("country");
		definitions[16].setPrimaryKey(false);
		definitions[16].setSecurityFilter("yes (coma separated filter specification by user role: category/role pairs)");
		definitions[16].setSystem(false);
		definitions[16].setType(org.openl.types.java.JavaOpenClass.getOpenClass(org.openl.rules.enumeration.CountriesEnum[].class));
		definitions[17] = new TablePropertyDefinition();
		definitions[17].setBusinessSearch(false);
		definitions[17].setConstraints(new org.openl.rules.table.constraints.Constraints("data: currencies"));
		definitions[17].setDescription("Currency");
		definitions[17].setDimensional(true);
		definitions[17].setDisplayName("Currency");
		definitions[17].setExpression(new org.openl.rules.table.properties.expressions.match.MatchingExpression("contains(currency)"));
		definitions[17].setGroup("Business Dimension");
		definitions[17].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[17].setName("currency");
		definitions[17].setPrimaryKey(false);
		definitions[17].setSecurityFilter("yes (coma separated filter specification by user role: category/role pairs)");
		definitions[17].setSystem(false);
		definitions[17].setType(org.openl.types.java.JavaOpenClass.getOpenClass(org.openl.rules.enumeration.CurrenciesEnum[].class));
		definitions[18] = new TablePropertyDefinition();
		definitions[18].setBusinessSearch(false);
		definitions[18].setConstraints(new org.openl.rules.table.constraints.Constraints("data: languages"));
		definitions[18].setDescription("Language");
		definitions[18].setDimensional(true);
		definitions[18].setDisplayName("Language");
		definitions[18].setExpression(new org.openl.rules.table.properties.expressions.match.MatchingExpression("contains(lang)"));
		definitions[18].setGroup("Business Dimension");
		definitions[18].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[18].setName("lang");
		definitions[18].setPrimaryKey(false);
		definitions[18].setSecurityFilter("yes (coma separated filter specification by user role: category/role pairs)");
		definitions[18].setSystem(false);
		definitions[18].setType(org.openl.types.java.JavaOpenClass.getOpenClass(org.openl.rules.enumeration.LanguagesEnum[].class));
		definitions[19] = new TablePropertyDefinition();
		definitions[19].setBusinessSearch(true);
		definitions[19].setConstraints(new org.openl.rules.table.constraints.Constraints("data: usStates"));
		definitions[19].setDescription("US State");
		definitions[19].setDimensional(true);
		definitions[19].setDisplayName("US States");
		definitions[19].setExpression(new org.openl.rules.table.properties.expressions.match.MatchingExpression("contains(usState)"));
		definitions[19].setGroup("Business Dimension");
		definitions[19].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[19].setName("state");
		definitions[19].setPrimaryKey(false);
		definitions[19].setSecurityFilter("yes (coma separated filter specification by user role: category/role pairs)");
		definitions[19].setSystem(false);
		definitions[19].setType(org.openl.types.java.JavaOpenClass.getOpenClass(org.openl.rules.enumeration.UsStatesEnum[].class));
		definitions[20] = new TablePropertyDefinition();
		definitions[20].setBusinessSearch(true);
		definitions[20].setConstraints(new org.openl.rules.table.constraints.Constraints("data: regions"));
		definitions[20].setDescription("Economic Region");
		definitions[20].setDimensional(true);
		definitions[20].setDisplayName("Region");
		definitions[20].setExpression(new org.openl.rules.table.properties.expressions.match.MatchingExpression("contains(region)"));
		definitions[20].setGroup("Business Dimension");
		definitions[20].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY});
		definitions[20].setName("region");
		definitions[20].setPrimaryKey(false);
		definitions[20].setSecurityFilter("yes (coma separated filter specification by user role: category/role pairs)");
		definitions[20].setSystem(false);
		definitions[20].setType(org.openl.types.java.JavaOpenClass.getOpenClass(org.openl.rules.enumeration.RegionsEnum[].class));
		definitions[21] = new TablePropertyDefinition();
		definitions[21].setBusinessSearch(false);
		definitions[21].setConstraints(new org.openl.rules.table.constraints.Constraints("NN.NN[.NN]"));
		definitions[21].setDescription("Version is a dimension with a specific constraint - one and only one version mus"
		 + "t be active(per dimension), the dispatch is done automatically to the active ver"
		 + "sion");
		definitions[21].setDimensional(false);
		definitions[21].setDisplayName("Version");
		definitions[21].setGroup("Version");
		definitions[21].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[21].setName("version");
		definitions[21].setPrimaryKey(false);
		definitions[21].setSystem(false);
		definitions[21].setTableType(new XlsNodeTypes[] {XlsNodeTypes.XLS_DT, XlsNodeTypes.XLS_SPREADSHEET, XlsNodeTypes.XLS_TBASIC, XlsNodeTypes.XLS_COLUMN_MATCH, XlsNodeTypes.XLS_METHOD});
		definitions[21].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String.class));
		definitions[22] = new TablePropertyDefinition();
		definitions[22].setBusinessSearch(false);
		definitions[22].setConstraints(new org.openl.rules.table.constraints.Constraints("unique in:TableGroup"));
		definitions[22].setDefaultValue("true");
		definitions[22].setDescription("Indicates an active version");
		definitions[22].setDimensional(false);
		definitions[22].setDisplayName("Active");
		definitions[22].setGroup("Version");
		definitions[22].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[22].setName("active");
		definitions[22].setPrimaryKey(false);
		definitions[22].setSystem(false);
		definitions[22].setTableType(new XlsNodeTypes[] {XlsNodeTypes.XLS_DT, XlsNodeTypes.XLS_SPREADSHEET, XlsNodeTypes.XLS_TBASIC, XlsNodeTypes.XLS_COLUMN_MATCH, XlsNodeTypes.XLS_METHOD});
		definitions[22].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.Boolean.class));
		definitions[23] = new TablePropertyDefinition();
		definitions[23].setBusinessSearch(false);
		definitions[23].setDefaultValue("false");
		definitions[23].setDescription("Raises an error if no rules were matched. The error will display at least parame"
		 + "ter set, if possible trace(not complete)");
		definitions[23].setDimensional(false);
		definitions[23].setDisplayName("Fail On Miss");
		definitions[23].setGroup("Dev");
		definitions[23].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY, InheritanceLevel.TABLE});
		definitions[23].setName("failOnMiss");
		definitions[23].setPrimaryKey(false);
		definitions[23].setSystem(false);
		definitions[23].setTableType(new XlsNodeTypes[] {XlsNodeTypes.XLS_DT});
		definitions[23].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.Boolean.class));
		definitions[24] = new TablePropertyDefinition();
		definitions[24].setBusinessSearch(true);
		definitions[24].setConstraints(new org.openl.rules.table.constraints.Constraints("Worksheet, Workbook, Module"));
		definitions[24].setDescription("Defines scope for properties");
		definitions[24].setDimensional(false);
		definitions[24].setDisplayName("Scope");
		definitions[24].setGroup("Dev");
		definitions[24].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.CATEGORY});
		definitions[24].setName("scope");
		definitions[24].setPrimaryKey(false);
		definitions[24].setSystem(false);
		definitions[24].setTableType(new XlsNodeTypes[] {XlsNodeTypes.XLS_PROPERTIES});
		definitions[24].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String.class));
		definitions[25] = new TablePropertyDefinition();
		definitions[25].setBusinessSearch(false);
		definitions[25].setConstraints(new org.openl.rules.table.constraints.Constraints("regexp:([a-z_]{1}[a-z0-9_]*(\\.[a-z_]{1}[a-z0-9_]*)*)"));
		definitions[25].setDefaultValue("org.openl.generated.beans");
		definitions[25].setDescription("Defines the name of the package for datatype generation");
		definitions[25].setDimensional(false);
		definitions[25].setDisplayName("Datatype Package");
		definitions[25].setGroup("Dev");
		definitions[25].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.MODULE, InheritanceLevel.TABLE});
		definitions[25].setName("datatypePackage");
		definitions[25].setPrimaryKey(false);
		definitions[25].setSystem(false);
		definitions[25].setTableType(new XlsNodeTypes[] {XlsNodeTypes.XLS_DATATYPE});
		definitions[25].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String.class));
		definitions[26] = new TablePropertyDefinition();
		definitions[26].setBusinessSearch(false);
		definitions[26].setConstraints(new org.openl.rules.table.constraints.Constraints("no"));
		definitions[26].setDimensional(false);
		definitions[26].setDisplayName("Transaction Type");
		definitions[26].setGroup("Dev");
		definitions[26].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[26].setName("transaction");
		definitions[26].setPrimaryKey(false);
		definitions[26].setSystem(false);
		definitions[26].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String[].class));
		definitions[27] = new TablePropertyDefinition();
		definitions[27].setBusinessSearch(false);
		definitions[27].setConstraints(new org.openl.rules.table.constraints.Constraints("no"));
		definitions[27].setDimensional(false);
		definitions[27].setDisplayName("Custom1");
		definitions[27].setGroup("Dev");
		definitions[27].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[27].setName("custom1");
		definitions[27].setPrimaryKey(false);
		definitions[27].setSystem(false);
		definitions[27].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String[].class));
		definitions[28] = new TablePropertyDefinition();
		definitions[28].setBusinessSearch(false);
		definitions[28].setConstraints(new org.openl.rules.table.constraints.Constraints("no"));
		definitions[28].setDimensional(false);
		definitions[28].setDisplayName("Custom2");
		definitions[28].setGroup("Dev");
		definitions[28].setInheritanceLevel(new InheritanceLevel[] {InheritanceLevel.TABLE});
		definitions[28].setName("custom2");
		definitions[28].setPrimaryKey(false);
		definitions[28].setSystem(false);
		definitions[28].setType(org.openl.types.java.JavaOpenClass.getOpenClass(java.lang.String[].class));
        // <<< END INSERT TablePropertiesDefinition >>>
    }

    public static TablePropertyDefinition[] getDefaultDefinitions() {
        return definitions;
    }

}
