/* Generated By:JavaCC: Do not edit this line. BExGrammarConstants.java */
package org.openl.grammars.bexgrammar;

public interface BExGrammarConstants {

  int EOF = 0;
  int OR = 6;
  int AND = 7;
  int NOT = 8;
  int ABSTRACT = 9;
  int BREAK = 10;
  int CALCULATE = 11;
  int CASE = 12;
  int CATCH = 13;
  int CONST = 14;
  int CONTINUE = 15;
  int _DEFAULT = 16;
  int DO = 17;
  int ELSE = 18;
  int EXTENDS = 19;
  int FALSE = 20;
  int FINAL = 21;
  int FINALLY = 22;
  int FOR = 23;
  int GOTO = 24;
  int IF = 25;
  int PLUSSTR = 26;
  int IMPLEMENTS = 27;
  int IMPORT = 28;
  int INSTANCEOF = 29;
  int INTERFACE = 30;
  int NATIVE = 31;
  int NEW = 32;
  int NULL = 33;
  int PACKAGE = 34;
  int PRIVATE = 35;
  int PROTECTED = 36;
  int PUBLIC = 37;
  int RETURN = 38;
  int STATIC = 39;
  int SUPER = 40;
  int SWITCH = 41;
  int SYNCHRONIZED = 42;
  int THROW = 43;
  int THROWS = 44;
  int TRANSIENT = 45;
  int TRUE = 46;
  int TRY = 47;
  int VOID = 48;
  int VOLATILE = 49;
  int WHILE = 50;
  int OF = 51;
  int THE = 52;
  int WHERE = 53;
  int IS = 54;
  int LESS = 55;
  int THAN = 56;
  int LPAREN = 57;
  int RPAREN = 58;
  int LBRACE = 59;
  int RBRACE = 60;
  int LBRACKET = 61;
  int RBRACKET = 62;
  int SEMICOLON = 63;
  int COMMA = 64;
  int DOT = 65;
  int ASSIGN = 66;
  int GT = 67;
  int LT = 68;
  int BANG = 69;
  int TILDE = 70;
  int HOOK = 71;
  int COLON = 72;
  int EQ = 73;
  int LE = 74;
  int GE = 75;
  int NE = 76;
  int BOOL_OR = 77;
  int BOOL_AND = 78;
  int INCR = 79;
  int DECR = 80;
  int PLUS = 81;
  int MINUS = 82;
  int STAR = 83;
  int SLASH = 84;
  int BIT_AND = 85;
  int BIT_OR = 86;
  int BIT_XOR = 87;
  int REM = 88;
  int LSHIFT = 89;
  int RSIGNEDSHIFT = 90;
  int RUNSIGNEDSHIFT = 91;
  int PLUSASSIGN = 92;
  int MINUSASSIGN = 93;
  int STARASSIGN = 94;
  int SLASHASSIGN = 95;
  int ANDASSIGN = 96;
  int ORASSIGN = 97;
  int XORASSIGN = 98;
  int REMASSIGN = 99;
  int LSHIFTASSIGN = 100;
  int RSIGNEDSHIFTASSIGN = 101;
  int RUNSIGNEDSHIFTASSIGN = 102;
  int EXP = 103;
  int IMPL = 104;
  int INTEGER_LITERAL = 105;
  int DECIMAL_LITERAL = 106;
  int HEX_LITERAL = 107;
  int OCTAL_LITERAL = 108;
  int FLOATING_POINT_LITERAL = 109;
  int BUSINESS_INTEGER_LITERAL = 110;
  int PERCENT_LITERAL = 111;
  int EXPONENT = 112;
  int CHARACTER_LITERAL = 113;
  int STRING_LITERAL = 114;
  int IDENTIFIER = 115;
  int LETTER = 116;
  int DIGIT = 117;
  int SINGLE_LINE_COMMENT = 120;
  int FORMAL_COMMENT = 121;
  int MULTI_LINE_COMMENT = 122;

  int DEFAULT = 0;
  int IN_FORMAL_COMMENT = 1;
  int IN_MULTI_LINE_COMMENT = 2;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"abstract\"",
    "\"break\"",
    "\"Calculate\"",
    "\"case\"",
    "\"catch\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"plus\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"interface\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"of\"",
    "\"the\"",
    "\"where\"",
    "\"is\"",
    "\"less\"",
    "\"than\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"**\"",
    "\"->\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<BUSINESS_INTEGER_LITERAL>",
    "<PERCENT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<token of kind 118>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 123>",
    "\"equals to\"",
    "\"same as\"",
    "\"does not equal to\"",
    "\"different from\"",
    "\"is less than\"",
    "\"is more than\"",
    "\"is less or equal\"",
    "\"is no more than\"",
    "\"is in\"",
    "\"is more or equal\"",
    "\"is no less than\"",
  };

}
