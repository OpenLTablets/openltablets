/* Generated By:JavaCC: Do not edit this line. BExGrammarTokenManager.java */
package org.openl.grammars.bexgrammar;

public class BExGrammarTokenManager implements BExGrammarConstants
{
  // CommonTokenAction: use the begins/ends fields added to the Jack
  // CharStream class to set corresponding fields in each Token (which was
  // also extended with new fields). By default Jack doesn't supply absolute
  // offsets, just line/column offsets
  void CommonTokenAction(Token t)
  {
//    t.beginsAt = input_stream.beginOffset;
//    t.endsAt = input_stream.endOffset;
//    throw new RuntimeException("Define CommonTokenAction");
/*
    org.openl.util.Log.debug(
      "Token = <"
        + t.image
        + "> "
        + "("
        + t.beginLine
        + ","
        + t.beginColumn
        + ")-("
        + t.endLine
        + ","
        + t.endColumn
        + ")"
        + " "
        + t.kind
        + " = "
        + JGrammarConstants.tokenImage[t.kind]);
*/

  }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffffc0L) != 0L || (active1 & 0x7f80000000000000L) != 0L)
         {
            jjmatchedKind = 110;
            return 39;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
            return 4;
         if ((active1 & 0x4000004008000L) != 0L)
            return 67;
         return -1;
      case 1:
         if ((active1 & 0x4000000000000L) != 0L)
            return 65;
         if ((active0 & 0xffffffdfdff80L) != 0L || (active1 & 0x7f80000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return 39;
         }
         if ((active0 & 0x2020040L) != 0L)
            return 39;
         return -1;
      case 2:
         if ((active0 & 0x800100800180L) != 0L)
            return 39;
         if ((active1 & 0x7f80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xf7ffefd7dfe00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 2;
            }
            return 39;
         }
         return -1;
      case 3:
         if ((active0 & 0xe3ffcf879ee00L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
            return 39;
         }
         if ((active0 & 0x1400205041000L) != 0L)
            return 39;
         if ((active1 & 0x7f80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x226fcf8098a00L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 4;
            }
            return 39;
         }
         if ((active0 & 0xc190000706400L) != 0L)
            return 39;
         if ((active1 & 0x7f80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x2241c68498a00L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
            return 39;
         }
         if ((active0 & 0x12e090000000L) != 0L)
            return 39;
         if ((active1 & 0x6f80000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0xc00490000L) != 0L)
            return 39;
         if ((active1 & 0x6f00000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x2241068008a00L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
            return 39;
         }
         return -1;
      case 7:
         if ((active0 & 0x241068000800L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 7;
            return 39;
         }
         if ((active0 & 0x2000000008200L) != 0L)
            return 39;
         if ((active1 & 0x6f00000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x40028000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 8;
            return 39;
         }
         if ((active0 & 0x201040000800L) != 0L)
            return 39;
         if ((active1 & 0x6f00000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x28000000L) != 0L)
            return 39;
         if ((active1 & 0x6f00000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 9;
            return 39;
         }
         return -1;
      case 10:
         if ((active1 & 0x6f00000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 10;
            return 39;
         }
         return -1;
      case 11:
         if ((active0 & 0x40000000000L) != 0L)
            return 39;
         if ((active1 & 0x6f00000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active1 & 0x6c00000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active1 & 0x6c00000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active1 & 0x6c00000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 37:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 38:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000200L);
      case 40:
         return jjStopAtPos(0, 52);
      case 41:
         return jjStopAtPos(0, 53);
      case 42:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x402000000L);
      case 43:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800400L);
      case 44:
         return jjStopAtPos(0, 59);
      case 45:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x801000800L);
      case 46:
         return jjStartNfaWithStates_0(0, 60, 4);
      case 47:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000004000000L);
      case 58:
         return jjStopAtPos(0, 67);
      case 59:
         return jjStopAtPos(0, 58);
      case 60:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80100020L);
      case 61:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 62:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300600040L);
      case 63:
         return jjStopAtPos(0, 66);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 91:
         return jjStopAtPos(0, 56);
      case 93:
         return jjStopAtPos(0, 57);
      case 94:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x280L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xf000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x30000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc0000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xf00000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7a000000L, 0x7f00000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x380000100L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x80000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c04000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x78000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xf80000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x3000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 54);
      case 124:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000100L);
      case 125:
         return jjStopAtPos(0, 55);
      case 126:
         return jjStopAtPos(0, 65);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 42:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 114, 65);
         break;
      case 43:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 45:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 60:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000L);
      case 61:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      case 62:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300400000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x480103800L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4100010000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 39);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xc180000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4040000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000080L, active1, 0L);
      case 111:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 39);
         return jjMoveStringLiteralDfa2_0(active0, 0x300000180c100L, active1, 0L);
      case 114:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 39);
         return jjMoveStringLiteralDfa2_0(active0, 0xe01800000400L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7f00000000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x12200000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7f80000000000000L);
      case 61:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 96);
         break;
      case 62:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x208000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 39);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000400L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x5020800000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000200100800L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000060c000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10018000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20041200L, active1, 0L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x40c1082000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400004000000L, active1, 0L);
      case 119:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 39);
         break;
      case 121:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 97);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000610400L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000002800L, active1, 0L);
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 39);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 39);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 39);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x10040080000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x1000000000000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x4002008000000L, active1, 0x500000000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2200000000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x4800000000000000L);
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x180010000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x104000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x29020008200L, active1, 0x80000000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc20000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 39);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 39);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0x1008000000L, active1, 0x500000000000000L);
      case 104:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0x80000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xa000008000L, active1, 0L);
      case 107:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 39);
         break;
      case 108:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L);
      case 110:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(4, 124);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6a00000000000000L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0x4050000200L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10800L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L);
      case 119:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4800000000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0L);
      case 99:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 39);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 39);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(5, 119);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 104:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2200000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x410800L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0x20008000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x2200000000000000L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x500000000000000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000800L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000200L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 39);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 39);
         return jjMoveStringLiteralDfa7_0(active0, 0x200008000000L, active1, 0x2200000000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0x4000000000000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 39);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x500000000000000L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 39);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2700000000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 39);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 39);
         return jjMoveStringLiteralDfa8_0(active0, 0x1020000000L, active1, 0x4000000000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x240008000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 39);
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 39);
         break;
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 39);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0x2400000000000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000000L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 39);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0x300000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000000L);
      case 102:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 39);
         break;
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x300000000000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2400000000000000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 39);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000000L);
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x6c00000000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x300000000000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 42, 39);
         break;
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2400000000000000L);
      case 110:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(11, 120);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(11, 121);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa13_0(active1, 0x4800000000000000L);
      case 113:
         return jjMoveStringLiteralDfa13_0(active1, 0x2400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x4800000000000000L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0x2400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x2400000000000000L);
      case 110:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(14, 123);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(14, 126);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 108:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(15, 122);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(15, 125);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 73;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAddStates(0, 12);
                  }
                  else if (curChar == 47)
                     jjAddStates(13, 14);
                  else if (curChar == 36)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAdd(39);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  else if (curChar == 39)
                     jjAddStates(18, 19);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAddStates(20, 22);
                  }
                  else if (curChar == 36)
                     jjCheckNAdd(10);
                  break;
               case 67:
                  if (curChar == 47)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddStates(23, 25);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(26, 28);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 36)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(29, 31);
                  break;
               case 11:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 39)
                     jjAddStates(18, 19);
                  break;
               case 16:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if (curChar == 39 && kind > 108)
                     kind = 108;
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 17);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 24:
                  if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  break;
               case 25:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 27:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 28:
                  if (curChar == 34 && kind > 109)
                     kind = 109;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 35);
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 31:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 38:
                  if (curChar != 36)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if (curChar != 48)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddStates(20, 22);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(42, 2);
                  break;
               case 43:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(43, 2);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(0, 12);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar != 46)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(36, 38);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(36, 38);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(50, 8);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(54, 8);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 8);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 60:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if (curChar == 37 && kind > 106)
                     kind = 106;
                  break;
               case 64:
                  if (curChar == 47)
                     jjAddStates(13, 14);
                  break;
               case 65:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 68:
                  if (curChar != 47)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(23, 25);
                  break;
               case 69:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(23, 25);
                  break;
               case 70:
                  if ((0x2400L & l) != 0L && kind > 115)
                     kind = 115;
                  break;
               case 71:
                  if (curChar == 10 && kind > 115)
                     kind = 115;
                  break;
               case 72:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(39);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 100)
                     kind = 100;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 104)
                     kind = 104;
                  break;
               case 14:
                  if ((0x2804L & l) != 0L && kind > 105)
                     kind = 105;
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 92)
                     jjAddStates(47, 49);
                  break;
               case 19:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 25:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 26:
                  if (curChar == 92)
                     jjAddStates(50, 53);
                  break;
               case 27:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 33:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x7e00000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 41:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(42, 2);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 66:
                  if (kind > 113)
                     kind = 113;
                  break;
               case 69:
                  if (kind > 115)
                     kind = 115;
                  jjAddStates(23, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(39);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(15, 17);
                  break;
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 113)
                     kind = 113;
                  break;
               case 69:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjAddStates(23, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 73 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x20000000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x10000000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   45, 46, 51, 52, 55, 56, 8, 10, 11, 14, 59, 60, 63, 67, 68, 25, 
   26, 28, 16, 18, 41, 43, 2, 69, 70, 72, 4, 5, 8, 10, 11, 14, 
   25, 26, 30, 28, 47, 48, 8, 55, 56, 8, 59, 60, 63, 6, 7, 19, 
   20, 22, 27, 29, 31, 33, 49, 50, 53, 54, 57, 58, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\157\162", "\141\156\144", "\156\157\164", 
"\141\142\163\164\162\141\143\164", "\142\162\145\141\153", "\103\141\154\143\165\154\141\164\145", 
"\143\141\163\145", "\143\141\164\143\150", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\145\154\163\145", 
"\145\170\164\145\156\144\163", "\146\141\154\163\145", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\157\162", "\147\157\164\157", "\151\146", "\160\154\165\163", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164\145\162\146\141\143\145", "\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", 
"\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", 
"\160\165\142\154\151\143", "\162\145\164\165\162\156", "\163\164\141\164\151\143", 
"\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", "\167\150\145\162\145", "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", 
"\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", 
"\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", 
"\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", 
"\74\74\75", "\76\76\75", "\76\76\76\75", "\52\52", "\55\76", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\157\146\40\164\150\145", "\151\163\40\154\145\163\163\40\164\150\141\156", 
"\151\163\40\155\157\162\145\40\164\150\141\156", "\151\163\40\154\145\163\163\40\157\162\40\145\161\165\141\154", 
"\151\163\40\156\157\40\155\157\162\145\40\164\150\141\156", "\151\163\40\151\156", 
"\151\163\40\155\157\162\145\40\157\162\40\145\161\165\141\154", "\151\163\40\156\157\40\154\145\163\163\40\164\150\141\156", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x7f80771fffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x38000000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x38000000000000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x46000000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[73];
private final int[] jjstateSet = new int[146];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public BExGrammarTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public BExGrammarTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 73; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 118)
         {
            jjmatchedKind = 118;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 118)
         {
            jjmatchedKind = 118;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 113 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
