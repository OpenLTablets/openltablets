<ui:composition
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:a4j="http://richfaces.org/a4j"
    xmlns:rich="http://richfaces.org/rich">

    <style>
        .expandable-link {
            cursor: pointer;
            border-bottom: 1px dashed #777777;
        }

        .disabled-link {
            cursor: default;
            border-bottom: none;
        }

        #copyModuleForm table td:first-child {
            width: 130px;
        }

        #copyModuleForm table input[type="text"],
        #copyModuleForm table select,
        #copyModuleForm table textarea {
            width: 295px;
        }

        #copyModuleForm table input[type="text"].with-button,
        #copyModuleForm table span.with-button {
            width: 258px;
        }

        #from-panel-short td,
        tr.new-file-name-setting-short td,
        tr.info td {
            padding-top: 7px;
        }

        #copyModuleForm .match {
            padding: 5px 16px;
            background: url("webresource/images/ok.png") no-repeat;
        }
        #copyModuleForm .not-match {
            padding: 5px 16px;
            background: url("webresource/images/warning16.png") no-repeat;
        }

        #modulePathOldText {
            display: none;
        }
        .editable #modulePathOldText {
            display: inline-block;
        }

        .editable #modulePathOldTextField {
            display: none;
        }

    </style>

    <rich:popupPanel id="copyModulePopup" width="470" autosized="true">
        <f:facet name="header">
            <h:outputText value="Copy Module" />
        </f:facet>

        <f:facet name="controls">
            <h:graphicImage value="/images/close.gif" class="close"
                 onclick="ws.ui.hide('copyModulePopup')" alt="Close" />
        </f:facet>

        <h:form prependId="true" id="copyModuleForm" class="fields">
            <section>
                <h3>From</h3>
                <div>
                    <table id="from-panel-short" class="properties properties-form wide">
                        <tr>
                            <td>Module Name</td>
                            <td>
                                <span id="moduleNameLink" class="expandable-link">
                                </span>
                            </td>
                        </tr>
                    </table>

                    <table id="from-panel-full" class="properties properties-form wide" >
                        <tr class="info">
                            <td>Module Name</td>
                            <td>
                                <h:inputHidden id="moduleNameOld"/>
                                <!-- Disabled items are not submitted-->
                                <h:panelGroup id="moduleNameOldText" />
                            </td>
                        </tr>
                        <tr class="module-with-wildcard info">
                            <td>File Path Pattern</td>
                            <td>
                                <h:outputText id="modulePathPattern" value="#{projectBean.modulePathPattern}"/>
                            </td>
                        </tr>
                        <tr>
                            <td>File Path</td>
                            <td>
                                <h:panelGroup id="modulePathOldPanel">
                                    <h:inputHidden id="modulePathOld"/>

                                    <span id="modulePathOldTextField"/>

                                    <select id="modulePathOldText" style="width:100%">
                                        <ui:repeat value="#{projectBean.modulePathsForPathPattern}" var="modulePath">
                                            <h:panelGroup rendered="#{projectBean.currentModuleMatchesSomePathPattern and projectBean.isCurrentModuleHasPath(modulePath)}">
                                                <option value="#{modulePath}" selected="selected"><h:outputText value="#{modulePath}"/></option>
                                            </h:panelGroup>
                                            <h:panelGroup rendered="#{!(projectBean.currentModuleMatchesSomePathPattern and projectBean.isCurrentModuleHasPath(modulePath))}">
                                                <option value="#{modulePath}"><h:outputText value="#{modulePath}"/></option>
                                            </h:panelGroup>
                                        </ui:repeat>
                                    </select>
                                </h:panelGroup>
                            </td>
                        </tr>
                    </table>
                </div>
            </section>


            <section>
                <h3>As</h3>
                <div>
                    <table class="properties properties-form wide">
                        <tr>
                            <td>New Module Name</td>
                            <td>
                                <h:inputText id="moduleName" validator="#{projectBean.validateModuleNameForCopy}" />
                                <h:panelGroup id="validationIcon" style="height: 16px; width: 16px; padding: 5px; display: inline-block; ">
                                    <h:panelGroup rendered="#{projectBean.fileNameMatched}" styleClass="title title-right title-bottom match">
                                        <em>
                                            Values from file name will be applied as business<br/>
                                            dimension properties to rules.
                                        </em>
                                    </h:panelGroup>
                                    <h:panelGroup rendered="#{!projectBean.fileNameMatched}" styleClass="title title-right title-bottom not-match">
                                        <em>
                                            Values from file name won't be applied as business<br/>
                                            dimension properties to rules. The file name doesn't<br/>
                                            match File Name Pattern for the project.
                                        </em>
                                    </h:panelGroup>
                                </h:panelGroup>
                            </td>
                        </tr>
                        <tr>
                            <td></td>
                            <td><a4j:outputPanel ajaxRendered="true">
                                <h:message for="moduleName" styleClass="error" />
                            </a4j:outputPanel></td>
                        </tr>

                        <tr class="new-file-name-setting-short">
                            <td>New File Name</td>
                            <td>
                                <h:inputHidden id="modulePath"/>
                                <span id="newFileNameLink" class="expandable-link">
                                </span>
                            </td>
                        </tr>
                        <tr class="new-file-name-setting-short">
                            <td></td>
                            <td><a4j:outputPanel ajaxRendered="true">
                                <h:message for="newFileName" styleClass="error" />
                            </a4j:outputPanel></td>
                        </tr>

                        <tr class="new-file-name-setting-full info">
                            <td>New File Path</td>
                            <td><h:panelGroup id="newFileFolder" /></td>
                        </tr>
                        <tr class="new-file-name-setting-full">
                            <td>New File Name</td>
                            <td><h:inputText id="newFileName" validator="#{projectBean.validateModulePathForCopy}" /></td>
                        </tr>
                        <tr class="new-file-name-setting-full">
                            <td></td>
                            <td><a4j:outputPanel ajaxRendered="true">
                                <h:message for="newFileName" styleClass="error" />
                            </a4j:outputPanel></td>
                        </tr>

                        <tr class="project-with-properties-pattern info">
                            <td>Properties pattern for a file name</td>
                            <td>
                                <h:outputText id="propertiesFileNamePattern" value="#{projectBean.propertiesFileNamePattern}"
                                              styleClass="with-button" style="display: inline-block" />
                                <a id="patternInfo" onclick="showPatternInfo('#{projectBean.currentPropertiesFileNameProcessor}');"
                                   title="Description" class="imageButton"
                                   style="background:url('webresource/images/info.png');display: inline-block;" />

                            </td>
                        </tr>
                    </table>
                </div>
            </section>

            <footer>
                <a4j:commandButton id="copyModuleBtn" value="Copy" action="#{projectBean.copyModule}"
                    styleClass="button-primary"
                    oncomplete="if(!#{facesContext.validationFailed}){ws.ui.hide('copyModulePopup');copyModuleDone();}" />
                <input type="button" value="Cancel" onclick="ws.ui.hide('copyModulePopup');" />
            </footer>

            <a4j:jsFunction name="rerenderCopyModuleDialog" render="modulePathPattern modulePathOldPanel propertiesFileNamePattern" oncomplete="showCopyModuleDialog();">
                <a4j:param name="moduleName" assignTo="#{projectBean.currentModuleName}" />
            </a4j:jsFunction>

            <a4j:jsFunction name="checkFileMatch" render="validationIcon">
                <a4j:param name="newFileName" assignTo="#{projectBean.newFileName}" />
            </a4j:jsFunction>

        </h:form>
    </rich:popupPanel>

    <script>
    //<![CDATA[

        var currentModule;

        function copyModule(module, callback) {
            if (callback) {
                copyModuleDone = callback;
            }
            currentModule = module;

            rerenderCopyModuleDialog(module.name);
        }

        function showCopyModuleDialog() {
            var module = currentModule;

            var copier = new ModuleCopier();

            copier.fields.getModuleNameOld().val(module.name);
            copier.fields.getModuleNameOldText().text(module.name);
            copier.fields.getModuleName().val(module.name);
            copier.fields.getModulePathOld().val(copier.fields.getModulePathOldText().val());
            copier.fields.getModulePathOldTextField().text(copier.fields.getModulePathOldText().val());

            $j("#copyModuleForm span.error").remove();

            copier.initExpandableLink('#from-panel-short', '#from-panel-full');
            copier.initExpandableLink('.new-file-name-setting-short', '.new-file-name-setting-full');
            copier.initListeners(module);

            copier.fields.getCopyModuleBtn().prop("disabled", true);

            $j("#copyModuleForm\\:modulePathOldPanel").parent().parent().removeClass('info');
            if (module.isModuleWithWildcard) {
                copier.fields.getModuleNameLink().text('Select Module');

                $j("#copyModuleForm\\:modulePathOldPanel").addClass('editable');
                copier.fields.getNewFileNameLink().addClass('disabled-link');
                $j(".module-with-wildcard").removeClass("hidden");
            } else if (module.includedInWildcard) {
                copier.fields.getModuleNameLink().text(module.name);

                $j("#copyModuleForm\\:modulePathOldPanel").addClass('editable');
                copier.fields.getNewFileNameLink().addClass('disabled-link');
                $j(".module-with-wildcard").removeClass("hidden");
            } else {
                copier.fields.getModuleNameLink().text(module.name);

                $j("#copyModuleForm\\:modulePathOldPanel").removeClass('editable');
                $j("#copyModuleForm\\:modulePathOldPanel").parent().parent().addClass('info');
                copier.fields.getNewFileNameLink().removeClass('disabled-link');
                $j(".module-with-wildcard").addClass("hidden");
            }

            if (copier.fields.hasPropertiesFileNamePattern()) {
                $j(".project-with-properties-pattern").removeClass("hidden");
                copier.fields.getModuleName().addClass("with-button");
                $j("#copyModuleForm\\:validationIcon").show();
            } else {
                $j(".project-with-properties-pattern").addClass("hidden");
                copier.fields.getModuleName().removeClass("with-button");
                $j("#copyModuleForm\\:validationIcon").hide();
            }

            ws.ui.show('copyModulePopup');
        }

        function copyModuleDone() {
            ws.nav.reload(true);
        }

    var ModuleCopier = function () {
        function replaceSlash(path) {
            return path.replace(/\\/g, '/');
        }

        function getFolder(path) {
            path = replaceSlash(path);
            var index = path.lastIndexOf('/');
            return index < 0 ? '' : path.substring(0, index);
        }

        function getFileName(path) {
            path = replaceSlash(path);
            var from = path.lastIndexOf('/');
            path = from < 0 ? path : path.substring(from + 1);
            var to = path.lastIndexOf('.');
            return to < 0 ? path : path.substring(0, to);
        }

        function getExtension(path) {
            path = replaceSlash(path);
            var index = path.lastIndexOf('.');
            return index < 0 ? '' : path.substring(index + 1);
        }

        var fields = {
            getModulePathOldText : function() {
                return $j("#modulePathOldText");
            },

            getModulePathOldTextField : function() {
                return $j("#modulePathOldTextField");
            },

            getModulePathOld : function() {
                return $j("#copyModuleForm\\:modulePathOld");
            },

            getModuleNameOld : function() {
                return $j("#copyModuleForm\\:moduleNameOld");
            },

            getModuleNameOldText : function() {
                return $j("#copyModuleForm\\:moduleNameOldText");
            },

            getModuleName : function () {
                return $j("#copyModuleForm\\:moduleName");
            },

            getModuleNameLink : function () {
                return $j("#moduleNameLink");
            },

            getNewFolder : function () {
                return $j("#copyModuleForm\\:newFileFolder");
            },

            getNewFileName : function () {
                return $j("#copyModuleForm\\:newFileName");
            },

            getNewFileNameLink : function () {
                return $j("#newFileNameLink");
            },

            getModulePath : function () {
                return $j("#copyModuleForm\\:modulePath");
            },

            getFromPanelFull : function () {
                return $j("#from-panel-full");
            },

            getCopyModuleBtn : function () {
                return $j("#copyModuleForm\\:copyModuleBtn");
            },

            getPropertiesFileNamePattern : function() {
                return $j("#copyModuleForm\\:propertiesFileNamePattern");
            },

            hasPropertiesFileNamePattern : function() {
                var pattern = fields.getPropertiesFileNamePattern().text();
                return pattern && pattern.length > 0;
            }
        };

        function Listeners(module) {
            var newFileNameChangedManually = false;
            var moduleNameChangedManually = false;

            var onModulePathOldTextChanged = function () {
                if (module.isModuleWithWildcard || module.includedInWildcard) {
                    var path = fields.getModulePathOldText().val();
                    fields.getModulePathOld().val(path);

                    var name = getFileName(path);
                    fields.getModuleNameOld().val(name);
                    fields.getModuleNameOldText().text(name);

                    if (!moduleNameChangedManually) {
                        fields.getModuleName().val(name);
                        onModuleNameChanged();
                    }
                }
            };

            var onModuleNameChanged = function (event) {
                if (event) {
                    // User manually entered value
                    moduleNameChangedManually = true;
                }
                var extension = getExtension(fields.getModulePathOldText().val());
                var folder = getFolder(fields.getModulePathOldText().val());
                var target = fields.getModuleName();
                var moduleName = target.val();

                fields.getNewFolder().text(folder);
                var newFolderRow = fields.getNewFolder().parent().parent();
                if (folder) {
                    newFolderRow.addClass('new-file-name-setting-full');
                    newFolderRow.removeClass('hidden');
                } else {
                    newFolderRow.removeClass('new-file-name-setting-full');
                    newFolderRow.addClass('hidden');
                }
                if (!newFileNameChangedManually) {
                    fields.getNewFileName().val(moduleName + '.' + extension)
                }
                var fileWithExtension = fields.getNewFileName().val();
                var fullPath = folder ? folder + '/' + fileWithExtension : fileWithExtension;
                fields.getNewFileNameLink().text(fullPath);
                fields.getModulePath().val(fullPath);

                if (fields.hasPropertiesFileNamePattern()) {
                    checkFileMatch(fullPath);
                }
            };

            var onNewFileNameChanged = function (event) {
                if (event) {
                    // User manually entered value
                    newFileNameChangedManually = true;
                }

                var folder = getFolder(fields.getModulePathOldText().val());
                var target = fields.getNewFileName();
                var fullPath = folder ? folder + '/' + target.val() : target.val();
                fields.getModulePath().val(fullPath);
            };

            var checkForModification = function () {
                var changed = fields.getModuleNameOld().val() != fields.getModuleName().val()
                        && fields.getModulePathOld().val() != fields.getModulePath().val()
                        && (!module.isModuleWithWildcard || fields.getFromPanelFull().is(":visible"));

                fields.getCopyModuleBtn().prop("disabled", !changed);
            };

            (function initListeners() {
                fields.getModulePathOldText().off().change(onModulePathOldTextChanged);
                if (module.isModuleWithWildcard || module.includedInWildcard) onModulePathOldTextChanged();

                fields.getModuleName().off().on("keyup change", onModuleNameChanged);
                onModuleNameChanged();
                fields.getNewFileName().off().on("keyup change", onNewFileNameChanged);

                $j("#copyModuleForm .properties :input").on("keyup change", checkForModification);
                $j('.expandable-link').click(checkForModification);
            })();

        }

        var listeners;

        // Public members

        return {
            fields: fields,

            initListeners: function (module) {
                listeners = new Listeners(module);
            },

            initExpandableLink: function (divWithLink, divToShow) {
                $j(divWithLink).show();
                $j(divToShow).hide();

                $j(divWithLink).find('.expandable-link').off().click(function () {
                    if (!$j(this).hasClass('disabled-link')) {
                        $j(divToShow).show();
                        $j(divWithLink).hide();
                    }
                })
            }
        };
    };

    //]]>
    </script>

</ui:composition>
