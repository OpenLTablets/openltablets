<ui:composition
        xmlns:f="http://java.sun.com/jsf/core"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:ui="http://java.sun.com/jsf/facelets"
        xmlns:a4j="http://richfaces.org/a4j"
        xmlns:rich="http://richfaces.org/rich">

    <style>
        input[type="radio"] {
            margin-top: -1px;
            vertical-align: middle;
        }

    </style>

    <rich:popupPanel id="importOpenAPIPopup" minwidth="470" autosized="true">

        <f:facet name="header">
            <h:outputText value="Import OpenAPI File"/>
        </f:facet>
        <f:facet name="controls">
            <h:graphicImage value="/images/close.gif" class="close"
                            onclick="ws.ui.hide('importOpenAPIPopup'); ws.nav.reload(true);" alt="Close"/>
        </f:facet>

        <h:form prependId="true" id="importOpenAPIForm" class="fields">
            <section>
                <div id="pathInfo">
                    <table id="openapi-file-path" class="properties properties-form">
                        <tr>
                            <td>
                                <label class="required"> OpenAPI File:</label>
                            </td>
                            <td>
                                <table style="width: 300px">
                                    <tr><td>
                                        <input type="radio" name="openApiImportType"
                                               id="openApiImportType1"
                                               value="GENERATE"
                                               checked="checked"/>
                                        <label for="openApiImportType1">Auto generate from Rules and Datatype tables</label>
                                    </td></tr>
                                    <tr><td>
                                        <input type="radio" name="openApiImportType"
                                               id="openApiImportType2"
                                               value="IMPORT"/>
                                        <label for="openApiImportType2">Upload in the Repository</label>
                                    </td></tr>
                                    <tr><td>
                                        <h:inputText id="openAPIPath" size="35" maxlength="70" styleClass="shortInput"
                                                     style="margin-left: 25px;"
                                                     validator="#{projectBean.validateOpenAPIPath}"/><br/>
                                        <a4j:outputPanel ajaxRendered="true">
                                            <h:message for="openAPIPath" styleClass="error" style="margin-left: 25px"/>
                                        </a4j:outputPanel>
                                    </td></tr>
                                </table>
                            </td>
                        </tr>
                        <tr>
                            <td><label class="required">Mode:</label></td>
                            <td>
                                <table style="width: 170px">
                                    <tr>
                                        <td style="text-align: left; vertical-align: middle;">
                                            <input type="radio" name="mode" id="reconciliation"
                                                   value="reconciliation"
                                                   checked="checked">Reconciliation</input>
                                        </td>
                                        <td style="text-align: center; vertical-align: middle; width: 35px;">
                                            <a class="imageButton"
                                               onclick="showOpenAPIModeInfo('openAPIReconciliation');return false;"
                                               style="background:url('webresource/images/info.png');"/>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style="text-align: left; vertical-align: middle;"><input type="radio" name="mode" id="generation"
                                                                                                     value="generation">Tables generation</input>
                                        </td>
                                        <td style="text-align: center; vertical-align: middle; width: 35px;">
                                            <a class="imageButton"
                                               onclick="showOpenAPIModeInfo('openAPIGeneration'); return false;"
                                               style="background:url('webresource/images/info.png');"/>
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>
                </div>
            </section>
            <section>
                <div id="moduleNames">
                    <table id="openapi-module-names" class="properties properties-form">
                        <tr>
                            <td>
                                <label class="required">Rules Module:</label>
                            </td>
                            <td>
                                <h:inputText id="algorithmModuleName" size="35" maxlength="70" styleClass="shortInput"
                                             validator="#{projectBean.validateAlgorithmModuleName}"/><br/>
                                <a4j:outputPanel ajaxRendered="true">
                                    <h:message for="algorithmModuleName" styleClass="error"/>
                                </a4j:outputPanel>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label class="required">Data Module:</label>
                            </td>
                            <td>
                                <h:inputText id="modelModuleName" size="35" maxlength="70" styleClass="shortInput"
                                             validator="#{projectBean.validateModelModuleName}"/><br/>
                                <a4j:outputPanel ajaxRendered="true">
                                    <h:message for="modelModuleName" styleClass="error"/>
                                </a4j:outputPanel>
                            </td>
                        </tr>
                    </table>
                </div>
            </section>
            <footer>
                <a4j:commandButton id="reconciliationOpenAPIBtn" value="Import"
                                   styleClass="button-primary"
                                   action="#{projectBean.reconcileOpenAPI}"
                                   oncomplete="if(!#{facesContext.validationFailed}){ws.ui.hide('importOpenAPIPopup'); editOpenAPIDone();}"/>
                <a4j:commandButton id="importOpenAPIBtn" value="Import"
                                   styleClass="button-primary" style="display: none;"
                                   action="#{projectBean.getModulesInfo}"
                                   data="#{projectBean.modulesInfoList}"
                                   oncomplete="if(!#{facesContext.validationFailed}){ws.ui.hide('importOpenAPIPopup'); openSettings(event.data);}"/>
                <a4j:commandButton id="createOrUpdateOpenAPISchemaBtn" value="Import"
                                   styleClass="button-primary"
                                   style="display: none;"
                                   onclick="return confirmToUpdateOpenAPI(#{projectBean.existedOpenAPIFilePath != null})"/>
                <input type="button" value="Cancel" onclick="ws.ui.hide('importOpenAPIPopup'); ws.nav.reload(true);"/>
            </footer>

            <a4j:jsFunction name="createOrUpdateOpenAPISchema"
                            action="#{projectBean.createOrUpdateOpenAPISchema}"
                            oncomplete="if(!#{facesContext.validationFailed}){ws.ui.hide('importOpenAPIPopup'); ws.ui.success('OpenAPI file was #{projectBean.existedOpenAPIFilePath != null ? 'updated' : 'created'} successfully!'); editOpenAPIDone();}"/>

            <a4j:jsFunction name="rerenderOpenAPIImportDialog"
                            render="openAPIPath modelModuleName algorithmModuleName"
                            oncomplete="showImportOpenAPIDialog();">
                <a4j:param name="openAPIPath"/>
                <a4j:param name="modelModuleName"/>
                <a4j:param name="algorithmModuleName"/>
            </a4j:jsFunction>

        </h:form>

    </rich:popupPanel>

    <script>
        let currentOpenAPIInfo;
        const DEFAULT_MODEL_MODULE_NAME = "#{environment.getProperty('openapi.default.data.module.name')}";
        const DEFAULT_ALGORITHM_MODULE_NAME = "#{environment.getProperty('openapi.default.algorithm.module.name')}";
        const RECONCILIATION = 'reconciliation';

        let modelModuleName;
        let algorithmModuleName;

        function editOpenAPI(openAPI, callback) {
            if (!canOverwriteRevision()) {
                return false;
            }
            if (callback) {
                editOpenAPIDone = callback;
            }

            currentOpenAPIInfo = openAPI;
            if (openAPI) {
                modelModuleName = openAPI.modelModuleName ? openAPI.modelModuleName : DEFAULT_MODEL_MODULE_NAME;
            } else {
                modelModuleName = DEFAULT_MODEL_MODULE_NAME;
            }

            if (openAPI) {
                algorithmModuleName = openAPI.algorithmModuleName ? openAPI.algorithmModuleName : DEFAULT_ALGORITHM_MODULE_NAME;
            } else {
                algorithmModuleName = DEFAULT_ALGORITHM_MODULE_NAME;
            }
            rerenderOpenAPIImportDialog(openAPI.path, modelModuleName, algorithmModuleName);
        }

        function editOpenAPIDone() {
            ws.nav.reload(true);
        }

        let OpenAPIEditor = function () {
            let fields = {
                getPath: function () {
                    return $j("#importOpenAPIForm\\:openAPIPath");
                },

                getModelsModuleName: function () {
                    return $j("#importOpenAPIForm\\:modelModuleName");
                },

                getRulesModuleName: function () {
                    return $j("#importOpenAPIForm\\:algorithmModuleName");
                },

                getModeInput: function () {
                    return $j("input[name=mode]");
                },
                getModeInputValue: function () {
                    return $j("input[name=mode]:checked");
                },
                getModelsInputs: function () {
                    return $j("#openapi-module-names");
                },

                getReconciliationButton: function () {
                    return $j("#importOpenAPIForm\\:reconciliationOpenAPIBtn");
                },

                getImportButton: function () {
                    return $j("#importOpenAPIForm\\:importOpenAPIBtn");
                },

                getOpenAPIImportTypeRadioButtons: function () {
                    return $j("input[name='openApiImportType']")
                },

                getCreateOrUpdateOpenAPISchemaButton: function () {
                    return $j("#importOpenAPIForm\\:createOrUpdateOpenAPISchemaBtn");
                }
            };

            function Listeners(openAPIInfo) {

                const switchFormState = function () {
                    const openApiImportType = fields.getOpenAPIImportTypeRadioButtons().filter(":checked").val();
                    const openApiMode = fields.getModeInputValue().val();

                    if (openApiImportType === "GENERATE") {
                        fields.getCreateOrUpdateOpenAPISchemaButton().show();
                        fields.getReconciliationButton().hide();
                        fields.getImportButton().hide();
                        fields.getModelsInputs().hide();
                    } else if (openApiImportType === "IMPORT") {
                        fields.getCreateOrUpdateOpenAPISchemaButton().hide();
                        if (openApiMode === "reconciliation") {
                            fields.getModelsInputs().hide();
                            fields.getImportButton().hide();
                            fields.getReconciliationButton().show();
                        } else if (openApiMode === "generation") {
                            fields.getModelsInputs().show();
                            fields.getImportButton().show();
                            fields.getReconciliationButton().hide();
                        }
                    }
                    resizePopupPanel("importOpenAPIPopup");
                }

                const onOpenAPIImportTypeChanged = function () {
                    const openApiImportType = fields.getOpenAPIImportTypeRadioButtons().filter(":checked").val();
                    switch (openApiImportType) {
                        case "GENERATE":
                            fields.getPath().attr("disabled", true);
                            if (fields.getModeInputValue().val() !== RECONCILIATION) {
                                fields.getModeInput().filter('[value="reconciliation"]').attr('checked', true).change();
                            }
                            fields.getModeInput().filter('[value="generation"]').attr("disabled", true);
                            break;
                        case "IMPORT":
                            fields.getPath().attr("disabled", false);
                            fields.getModeInput().filter('[value="generation"]').attr("disabled", false);
                            break;
                    }
                    switchFormState();
                }

                let onModeChanged = function (event) {
                    if (!event) {
                        return;
                    }
                    let self = this;
                    if (self.value === RECONCILIATION) {
                        validatePath();
                    } else {
                        validatePathAndModulesNames();
                    }
                    switchFormState();
                };

                let validatePath = function () {
                    let currentMode = fields.getModeInputValue().val();
                    if (currentMode === RECONCILIATION) {
                        let path = fields.getPath().val();
                        fields.getReconciliationButton().prop('disabled', !path);
                    } else {
                        validatePathAndModulesNames();
                    }
                }

                let validatePathAndModulesNames = function () {
                    let path = fields.getPath().val();
                    let modelsName = fields.getModelsModuleName().val();
                    let rulesName = fields.getRulesModuleName().val();
                    let isAnyFieldEmpty = !path || !modelsName || !rulesName;
                    fields.getImportButton().prop('disabled', isAnyFieldEmpty);
                };

                (function initListeners() {
                    fields.getPath().off().on('keyup change', validatePath);
                    fields.getModeInput().change(onModeChanged);
                    onOpenAPIImportTypeChanged();
                    fields.getOpenAPIImportTypeRadioButtons().change(onOpenAPIImportTypeChanged);

                    fields.getModelsModuleName().off().on('keyup change', validatePathAndModulesNames);
                    fields.getRulesModuleName().off().on('keyup change', validatePathAndModulesNames);
                })();
            }

            let listeners;

            return {
                fields: fields,

                initListeners: function (openAPIInfo) {
                    listeners = new Listeners(openAPIInfo);
                }

            }
        };

        let openAPIEditor;

        function showImportOpenAPIDialog() {
            let openAPIInfo = currentOpenAPIInfo;

            openAPIEditor = new OpenAPIEditor();

            openAPIEditor.fields.getPath().val(openAPIInfo.path);
            openAPIEditor.fields.getModelsModuleName().val(modelModuleName);
            openAPIEditor.fields.getRulesModuleName().val(algorithmModuleName);

            openAPIEditor.fields.getModeInput().val(['reconciliation']);
            if (openAPIInfo?.path.length > 0) {
                openAPIEditor.fields.getOpenAPIImportTypeRadioButtons().val(['IMPORT']);
            }

            openAPIEditor.initListeners(openAPIInfo);

            $j("#importOpenAPIForm span.error").remove();
            ws.ui.show('importOpenAPIPopup');
        }

        function openSettings(data) {
            if (!openAPIEditor) {
                return;
            }
            openModulesSettings({
                path: openAPIEditor.fields.getPath().val(),
                modules: data,
                modelModuleName: openAPIEditor.fields.getModelsModuleName().val(),
                algorithmModuleName: openAPIEditor.fields.getRulesModuleName().val()
            })
        }

        function confirmToUpdateOpenAPI(requiresConfirmation) {
            if (!requiresConfirmation) {
                createOrUpdateOpenAPISchema();
            } else {
                ws.ui.confirm({
                    title: 'Confirm import',
                    message: 'OpenAPI file already exists. Are you sure you want to update it by newly generated file?',
                    okButton: 'Update and Import',
                    onOK: createOrUpdateOpenAPISchema
                });
            }
        }

    </script>

</ui:composition>