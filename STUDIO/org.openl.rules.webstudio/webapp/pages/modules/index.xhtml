<!DOCTYPE html>
<html
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:c="http://java.sun.com/jsp/jstl/core"
    xmlns:a4j="http://richfaces.org/a4j"
    xmlns:rich="http://richfaces.org/rich"
    xmlns:jsffn="http://rules.openl.org/taglibs/jsffn">

    <c:set var="contextPath" value="#{facesContext.externalContext.request.contextPath}" />
    <c:set var="pathRoot" value="#{contextPath}/faces/pages/modules" />

<h:head>
    #{mainBean.init}

    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />

    <link href="#{contextPath}/css/bootstrap.min.css" rel="stylesheet" />
    <link href="#{contextPath}/css/common.css" rel="stylesheet" />
    <link href="#{contextPath}/css/layout/main.css" rel="stylesheet" />
    <link href="#{contextPath}/css/jquery.popup.css" rel="stylesheet" />
    <link href="#{contextPath}/css/jquery.multiselect.css" rel="stylesheet" />
    <link href="#{contextPath}/css/rulesDependencies.css" rel="stylesheet" />

    <link href="#{contextPath}/faces/tableEditor/css/tableeditor.min.css" rel="stylesheet" />

    <script src="#{contextPath}/javascript/common.js"></script>
    <script src="#{contextPath}/javascript/vendor/jquery-1.7.2.min.js"></script>
    <script src="#{contextPath}/javascript/vendor/bootstrap.min.js"></script>
    <script src="#{contextPath}/javascript/vendor/signals.min.js"></script>
    <script src="#{contextPath}/javascript/vendor/crossroads.min.js"></script>
    <script src="#{contextPath}/javascript/vendor/jquery-ui-1.8.16.custom.min.js"></script>
    <script src="#{contextPath}/javascript/vendor/jquery.layout.js"></script>
    <script src="#{contextPath}/javascript/jquery.popup.js"></script>
    <script src="#{contextPath}/javascript/jquery.multiselect.js"></script>
    <script src="#{contextPath}/javascript/bomjs.js"></script>
    <script src="#{contextPath}/javascript/vendor/jsf-2.1.19-customized.min.js"></script>

    <script>
        //<![CDATA[
        var $j = $.noConflict();

        var loadingPanel;

        var reqs = 0;

        var ChangesListener = function () {
            // Private members
            var self = this;
            var hasChanges = function() {return false};
            var showConfirmDialog = function() {};

            var setHasChanges = function () {};
            var hadChanges = false;

            var afterUnloadActions = [];

            var clickListener = function (e) {
                if (e.which != 2) {
                    // Not a middle mouse button
                    var $url = $j(this);
                    var proceed = function () {
                        $location.set($url.attr("href"));
                    };

                    var revertUrl = function () {
                    };
                    return !self.checkForChanges(proceed, revertUrl, proceed);
                }
            };

            // Public members
            this.revertChanges = function() {
                if (hasChanges()) {
                    hadChanges = true;
                    setHasChanges(false);
                }
            };

            this.restoreChangedState = function() {
                if (hadChanges) {
                    setHasChanges(true);
                    hadChanges = false;
                }
            };

            this.configure = function (hasChangesFunc, setHasChangesFunc, showConfirmDialogFunc, beforeUnloadFunc) {
                hasChanges = hasChangesFunc;
                showConfirmDialog = showConfirmDialogFunc;
                setHasChanges = setHasChangesFunc;
                window.onbeforeunload = function (e) {
                    var result = beforeUnloadFunc();
                    for (var i = 0; i < afterUnloadActions.length; i++) {
                        afterUnloadActions[i](e);
                    }
                    afterUnloadActions = [];
                    return result;
                };
                hadChanges = hasChanges();
            };

            this.checkForChanges = function(proceed, revertUrlChange, retryUrlChange) {
                if (typeof revertUrlChange == "undefined") {
                    revertUrlChange = function() {};
                }
                if (typeof retryUrlChange == "undefined") {
                    retryUrlChange = proceed;
                }
                if (hasChanges()) {
                    revertUrlChange();

                    var revertAndProceed = function () {
                        self.revertChanges();
                        retryUrlChange();
                    };
                    showConfirmDialog(revertAndProceed);
                    return true;
                } else {
                    proceed();
                    return false;
                }
            };

            this.addClickListener = function(selector) {
                $j(selector).off("click");
                $j(selector).click(clickListener);
            };

            this.addAfterUnloadAction = function(func) {
                afterUnloadActions.push(func);
            };

        };

        var WebStudio = function() {
        };

        WebStudio.prototype = (function() {
            // Init
            (function initRouter() {
                crossroads.ignoreState = true;

                // Home page
                crossroads.addRoute("/", function(reload) {
                    var toReload = { top: 1, left: 1, bottom: 0, right: 0 };
                    var toOpen = { bottom: 0, right: 0 };
                    render("home.xhtml", 0, toReload, toOpen);
                });
                // Project page
                crossroads.addRoute("{project}", function(reload, project) {
                    var url = "project.xhtml?name=" + project;
                    setModule(project);
                    var leftReload = reload == "true" || !$j("#projects-tree").length;
                    var toReload = { top: 1, left: leftReload, bottom: 0, right: 0 };
                    var toOpen = { bottom: 0, right: 0 };
                    render(url, { project: project }, toReload, toOpen, openProjectNode);
                });
                // Module page
                crossroads.addRoute("{project}/{module}", function(reload, project, module) {
                    var url = "module.xhtml?project=" + project + "&name=" + module;
                    var newModule = setModule(project, module);
                    var topReload =  reload == "true" || !$j("#breadcrumbs-module").length || newModule;
                    var leftReload = reload == "true" || !$j("#rulesTree").length || newModule;
                    var bottomReload = reload == "true" || !$j("#bottomPanel").length || newModule;
                    var toReload = { top: topReload, left: leftReload, bottom: bottomReload, right: 0 };
                    var toOpen = { bottom: 1, right: 0 };
                    render(url, { project: project, module: module }, toReload, toOpen);
                });
                // Table page
                crossroads.addRoute("{project}/{module}/table?{query}", function(reload, project, module, query) {
                    var url = [
                        { url: "table.xhtml?" + query },
                        { url: "tableDetailsData.xhtml?" + query, target: "#tableProperties" }
                    ];

                    //var toReload = !current.module || setModule(project, module);
                    var newModule = setModule(project, module);
                    var topReload =  reload == "true" || !$j("#breadcrumbs-module").length || newModule;
                    var leftReload = reload == "true" || !$j("#rulesTree").length || newModule;
                    var bottomReload = reload == "true" || !$j("#bottomPanel").length || newModule;
                    var toReload = { top: topReload, left: leftReload, bottom: bottomReload, right: 1 };
                    var toOpen = { bottom: 1, right: 1 };
                    render(url, { project: project, module: module }, toReload, toOpen, openTreeNode);
                });
                // Other pages
                crossroads.addRoute("{project}/{module}/{page*}", function(reload, project, module, page) {
                    var query;
                    if (page.indexOf("?") > -1) {
                        var parts = page.split("?");
                        page = parts[0];
                        query = parts[1];
                    }
                    var url = page + ".xhtml" + (query ? ("?" + query) : "");
                    var newModule = setModule(project, module);
                    var topReload =  reload == "true" || !$j("#breadcrumbs-module").length || newModule;
                    var leftReload = reload == "true" || !$j("#rulesTree").length || newModule;
                    var bottomReload = reload == "true" || !$j("#bottomPanel").length || newModule;
                    var toReload = { top: topReload, left: leftReload, bottom: bottomReload, right: 0 };
                    var toOpen = { bottom: 1, right: 0 };
                    render(url, { project: project, module: module }, toReload, toOpen);
                });
            })();

            // Private API

            // Public API
            return {
                ajax: {
                    get: function(urls, done) {
                        if (typeof urls === "string") {
                            // One page
                            $j.get(urls, function() {
                                done(arguments);
                            });
                        } else {
                            // Few pages
                            var requests = [];
                            for (var i = 0; i < urls.length; i++) {
                                requests.push($j.get(urls[i]));
                            }
                            $j.when.apply($j, requests).done(function() {
                                // After all pages are loaded
                                done(arguments);
                            });
                        }
                    },
                    load: function(parts, done) {
                        var urls = [];
                        for (var i = 0; i < parts.length; i++) {
                            urls.push(parts[i].url);
                        }
                        this.get(urls, function(result) {
                            if (parts.length == 1) {
                                $j(parts[0].target).html(result[0]);
                            } else {
                                for (var i = 0; i < parts.length; i++) {
                                    $j(parts[i].target).html(result[i][0]);
                                }
                            }
                            done && done();
                        });
                    }
                },

                nav: {
                    home: function() {
                        crossroads.parse("/", ["false"]);
                    },
                    reload: function(args) {
                        // Reload all page (if args is true) or only content
                        if (typeof args == "boolean") {
                            loadContent("", args);
                        // Reload only content with new params
                        } else if (typeof args == "object") {
                            var currentPage = getCurrentPage();
                            var newPage = $location.utils.setParams(currentPage, args);
                            goTo(newPage);
                        // Reload only content
                        } else {
                            loadContent();
                        }
                    },
                    reloadPanel: function(panel, callback) {
                        if (panel == "left") {
                            // TODO Refactor to not use ws instance
                            ws.ajax.load([DEFAULT_CONTENT.left], callback);
                        }
                    },
                    go: function(page, reload) {
                        goTo(page, reload);
                    },
                    // prefixPage will be removed when Global Search will be implemented
                    search: function(params, prefixPage) {
                        var query;

                        if (params) {
                            // Simple Search by text
                            if (params.constructor === String) {
                                query = "query=" + encodeURIComponent(params);

                                // Advanced Search
                            } else {
                                query = $j.param(params);
                            }
                        }

                        goTo(prefixPage + "search" + (query ? "?" + query : ""));
                    }
                },

                ui: {
                    show: function(id, params) {
                        // RichFaces Popup
                        if ($j("#" + id + "_container").length) {
                            RichFaces.$(id).show();

                            if (!params || (params && params.focus !== false)) {
                                // Focus the first visible enabled input
                                $j("#" + id + "_container :input:enabled:visible:first").focus();
                            }
                        }
                    },
                    hide: function(id) {
                        // RichFaces Popup
                        if ($j("#" + id + "_container").length) {
                            RichFaces.$(id).hide();
                        }
                    }
                },

                changes: new ChangesListener()
            };
        })();

        var ws = new WebStudio();

        $j.ajaxSetup({
            handleLoginPage: true,
            cache: false,
            beforeSend: showLoader,
            // Handle jQuery AJAX errors
            error: function(response, message, error) {
                handleError(response.status);
            },
            complete: hideLoader
        });

        $j.ajaxPrefilter(function(options, _, jqXHR) {
            if (options.handleLoginPage) {
                var deferredRequest = $j.Deferred();

                jqXHR.done(
                    function (data) {
                        if (typeof(data) == "string" && data.indexOf("OPENL_LOGIN_PAGE") != -1) {
                            location.href = "#{contextPath}/faces/pages/sessionExpired.xhtml";
                        } else {
                            deferredRequest.resolveWith(this, arguments);
                        }
                    }
                );

                deferredRequest.promise(jqXHR);

                jqXHR.success = jqXHR.done;
            }
        });

        // Fix Mojarra bug. Make rerendered forms work.
        // See http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-790
        jsf.ajax.addOnEvent(function (data) {
            if (data.status === "success") {
                var viewState = $j("partial-response:first changes:first update[id = 'javax.faces.ViewState']", data.responseXML);
                if (viewState.length) {
                    $j("partial-response:first changes:first update[id != 'javax.faces.ViewState']", data.responseXML).each(function (i, u) {
                        $j("form", document.getElementById(u.getAttribute("id"))).each(function (i, f) {
                            var field = $j("input[name='javax.faces.ViewState']", f);
                            if (!field.length) {
                                field = $j("<input type=\"hidden\" name=\"javax.faces.ViewState\" />").appendTo(f);
                            }
                            field.val(viewState.text());
                        });
                    });
                }
            }
        });

        // Handle JSF / Richfaces AJAX errors
        jsf.ajax.addOnError(function (data) {
            if (typeof console != "undefined") console.error(data);

            // @Deprecated
            var errorMessage = data.errorMessage;
            if (errorMessage) {
                // TODO Create mechanism to disable editing in UI when Excel file is opened.
                if (errorMessage.indexOf(".xls") > -1) {
                    message("#{msg['ws.common.error.save']}", 7000);
                } else if (data.errorName && data.errorName.indexOf("ViewExpiredException") > -1) {
                    ws.nav.reload(true);
                } else {
                    message(errorMessage, 7000);
                }
                return;
            }

            handleError(data.responseCode);
        });

        var urlRewrite = {
            prefix: "#{pathRoot}/"
        };

        var lastSavedHash = $location.getHash();
        var fullreload = false;

        $j(window).bind("hashchange", function() {
            var ch = $location.getHash();
            if (ch != lastSavedHash && ch == decodeURIComponent(lastSavedHash)) {
                // Workaround for a bug in firefox. Sometimes it decodes a loading url and then loads decoded url.
                location.hash = lastSavedHash;
                return;
            } else {
                if (ch == lastSavedHash) {
                    return;
                }
                var proceed = function() {
                    lastSavedHash = ch;
                    loadContent(getCurrentPage(), fullreload);
                    fullreload = false;
                };
                var retry = function() {
                    $location.setHash(ch);
                };
                var revert = function() {
                    $location.setHash(lastSavedHash);
                };

                ws.changes.checkForChanges(proceed, revert, retry);
            }
        });

        var mainLayout;
        var centerLayout;

        $j(function () {
            mainLayout = $j("#center").layout({
                spacing_open: 1,
                spacing_closed: 17,
                minSize: 209,
                west__size: 235,
                east__size: 235,
                east__initHidden: true,
                slidable: false,
                enableCursorHotkey: false
            });
            mainLayout.addCloseBtn("#west-closer", "west");
            mainLayout.addCloseBtn("#east-closer", "east");

            centerLayout = $j("#center .ui-layout-center").layout({
                spacing_open: 1,
                spacing_closed: 17,
                minSize: 57,
                south__size: 110,
                south__initHidden: true,
                slidable: false,
                enableCursorHotkey: false
            });
            centerLayout.addCloseBtn("#south-closer", "south");

            loadingPanel = $j("#loadingPanel");
            loadContent();

            $j("body").css({"visibility": "visible"});
        });

        function handleError(code) {
            if (code == 399) { // Session Timeout
                location.href = "#{contextPath}/faces/pages/sessionExpired.xhtml";
            } else if (code == 404) { // File Not Found
                message("#{msg['ws.common.error.404']}", 7000);
            } else {
                message("#{msg['ws.common.error.500']}", 7000);
            }
        }

        // Deprecated
        // Moved to WebStudio.nav
        function goTo(page, reload) {
            if (page) {
                page = page.replace(urlRewrite.prefix, "");
                // Check if requested page is the same as current
                if (decodeURIComponent(page.replace(/^#/, '')) == $location.getHash(true)) {
                    loadContent('', reload);
                } else {
                    fullreload = reload;
                    location.hash = page;
                }
            }
        }

        // Deprecated
        // TODO Move to WebStudio
        function getCurrentPage() {
            if (location.hash) {
                var page = lastSavedHash;
                if (page && page.indexOf(urlRewrite.prefix) < 0) {
                    page = urlRewrite.prefix + page;
                }
                return page;
            }
        }

        function loadContent(page, reload) {
            var page = page || getCurrentPage();

            if (!page) {
                crossroads.parse("/", ["false"]);
                return;
            }

            if (page.indexOf(urlRewrite.prefix) > -1) {
                page = page.split(urlRewrite.prefix)[1];
            }

            var params = [reload ? "true" : "false"];
            crossroads.parse(page, params);
        }

        var DEFAULT_CONTENT = {
            left:    { target: "#leftContent",   url: urlRewrite.prefix +  "leftPanel.xhtml" },
            top:     { target: "#top",           url: urlRewrite.prefix +  "topPanel.xhtml" },
            bottom:  { target: "#bottomContent", url: urlRewrite.prefix +  "bottomPanel.xhtml" },
            right:   { target: "#rightContent",  url: urlRewrite.prefix +  "rightPanel.xhtml" },
            content: { target: "#content",       url: urlRewrite.prefix +  "home.xhtml" }
        }

        var current  = {
            project: 0,
            module: 0
        }

        function setModule(project, module) {
            var newModule = project && module
                    && (!current.module || (current.project && current.module
                    && (current.project != project || current.module != module)));

            current.project = project || 0;
            current.module = module || 0;

            return newModule;
        }

        function render(page, init, load, open, done) {
            var content = [];
            var callbacks = [];

            load.left   && content.push(DEFAULT_CONTENT.left);
            load.top    && content.push(DEFAULT_CONTENT.top);
            load.bottom && content.push(DEFAULT_CONTENT.bottom);
            load.right  && content.push(DEFAULT_CONTENT.right);

            if (page) {
                if (typeof page === "string") {
                    // One page
                    content.push({ target: DEFAULT_CONTENT.content.target, url: urlRewrite.prefix +  page });
                } else {
                    // Few pages
                    for (var i = 0; i < page.length; i++) {
                        content.push(
                            { target: (page[i].target || DEFAULT_CONTENT.content.target), url: urlRewrite.prefix +  page[i].url } );
                    }
                }
            }

            callbacks.push(open.bottom ?
                function() {
                    centerLayout.show("south");
            } : function() {
                    centerLayout.hide("south");
            });
            callbacks.push(open.right ?
               function() {
                    mainLayout.show("east");
               } : function() {
                    mainLayout.hide("east");
            });

            done && callbacks.push(done);

            var initUrl = urlRewrite.prefix + "init.xhtml";
            if (init && init.project) {
                initUrl += ("?project=" + init.project);
                if (init.module) {
                    initUrl += "&module=" + init.module;
                }
            }

            ws.ajax.get(initUrl, function() {
                // Load all pages after project/module model initialized
                ws.ajax.load(content, function() {
                    for (var i = 0; i < callbacks.length; i++) {
                        callbacks[i].call();
                    }
                });
            });
        }

        function expandAndSelectNode(tableId, isFindTableByCell) {
            var tableLink = $j("#rulesTree a[href *= '" + tableId + "']");
            if (tableLink.length) { // Firefox has bug with decoding url after refresh
                // Expand nodes
                tableLink.parents(".rf-tr-nd-colps").each(function () {
                    var node = $j(this);
                    node.toggleClass("rf-tr-nd-colps rf-tr-nd-exp");
                    node.find(".rf-trn-hnd-colps:first").toggleClass("rf-trn-hnd-colps rf-trn-hnd-exp");
                });
                // Select node
                $j("#rulesTree .rf-trn.sel").removeClass("sel");
                tableLink.closest(".rf-trn").addClass("sel");

                var panelBody = tableLink.closest(".panel-body");
                var linkPos = tableLink.position().top;
                if (linkPos < 0 || linkPos > panelBody.height()) {
                    panelBody.animate({
                        scrollTop: tableLink.position().top + panelBody.scrollTop() - 7
                    });
                }
            } else if (isFindTableByCell) {
                selectTableByCell(decodeURIComponent(tableId));
            }
        }

        function openTreeNode(pageToOpen) {
            var page = pageToOpen || getCurrentPage();

            if (page && page.indexOf("table?uri=") > -1) {
                var tableId = page.split("uri=")[1].split("&")[0];
                expandAndSelectNode(tableId, true);
            }
        }

        function openProjectNode(pageToOpen) {
            var page = pageToOpen || getCurrentPage();

            if (page && page.indexOf("modules/") > -1) {
                var projectName = page.split("modules/")[1];
                var projectLink = $j("#projects-tree a[href = '#" + projectName + "']");
                if (projectLink.length) { // Firefox has bug with decoding url after refresh
                    // Select node
                    $j("#projects-tree li.sel").removeClass("sel");
                    projectLink.closest("li").addClass("sel");
                }
            }
        }

        function toProjectsPanel() {
            $j("#projectsTreePanel").show();
            $j("#rulesTreePanel").hide();
            $j("#recentVisitedTablesPanel").hide();
        }

        function toRulesPanel() {
            $j("#projectsTreePanel").hide();
            $j("#rulesTreePanel").show();
            $j("#recentVisitedTablesPanel").hide();
        }

        function toHistoryPanel() {
            $j("#projectsTreePanel").hide();
            $j("#rulesTreePanel").hide();
            $j("#recentVisitedTablesPanel").show();
        }

        function showLoader() {
            if (reqs++ == 0) {
                loadingPanel.show();
            }
        }

        function hideLoader() {
            if (reqs-- == 1) {
                loadingPanel.hide();
            }
        }

        // Deprecated
        // TODO Move to ws.ui namespace
        function showPopupMenu(event, popupId, elem, params) {
            var elem = $j(elem);
            var elemPos = elem.position();

            var left = elemPos.left + ((params && params.offsetLeft) || 0);
            var top = elemPos.top + elem.outerHeight() + ((params && params.offsetTop) || 0);
            var closeIcon = (params && params.closeIcon && 'webresource/images/close.gif') || false;

            var popupParams = {
                caller   : event.target,
                left     : left,
                top      : top,
                closeIcon: closeIcon
            };
            if (params && params.fitToScreen === true) {
                popupParams.maxWidth = "calc(100% - " + left + "px)";
                popupParams.maxHeight = "calc(100% - " + top + "px)";
            }

            $j("#" + popupId).popup(popupParams);
        }

        // Deprecated
        // TODO Move to ws.ui namespace
        function message(content, life, closable) {
            var messages = $j(".message");

            function remove() {
                message.remove();

                var top = 33;
                $j(".message").each(function() {
                    $j(this).css({"top" : top + "px"});
                    top += ($j(this).outerHeight() + 5);
                });
            }

            var message = $j("<div />").addClass("message").html(content);

            if (closable !== false) {
                message.css({"cursor" : "pointer"})
                message.click(remove);
            }

            var top;
            if (messages.length) {
                var lastMessage = $j(messages[messages.length - 1]);
                top = lastMessage.position().top + lastMessage.outerHeight() + 5 + "px";
            } else {
                top = "33px";
            }

            message.css({"top": top});
            $j("body").append(message);

            if (life > -1) {
                setTimeout(remove, life);
            }
        }
    //]]>
    </script>

    <a4j:jsFunction name="selectTableByCell" oncomplete="expandAndSelectNode('#{jsffn:encodeURL(tableBean.tableUri)}', false)">
        <a4j:param name="uri" assignTo="#{tableBean.uri}"/>
    </a4j:jsFunction>

    <title>OpenL Tablets WebStudio</title>
</h:head>

<h:body style="visibility: hidden">
    <script src="webresource/js/prototype/prototype-1.6.1.js"></script>

    <div id="header">
        <ui:include src="/pages/common/header.xhtml">
            <ui:param name="menu" value="rules" />
        </ui:include>
    </div>

    <div id="top"></div>

    <div id="center">
        <div id="left" class="ui-layout-west">
            <span id="west-closer" class="pane-closer" title="#{msg['ws.common.icon.close']}" />
            <div id="leftContent"></div>
        </div>
        <div class="ui-layout-center">
            <div id="content" class="ui-layout-center"></div>
            <div id="bottom" class="ui-layout-south">
                <span id="south-closer" class="pane-closer" title="#{msg['ws.common.icon.close']}" />
                <div id="bottomContent"></div>
            </div>
        </div>
        <div id="right" class="ui-layout-east">
            <span id="east-closer" class="pane-closer" title="#{msg['ws.common.icon.close']}" />
            <div id="rightContent"></div>
        </div>
    </div>

    <div id="footer">
        <ui:include src="/pages/common/footer.xhtml" />
    </div>

    <div id="loadingPanel" style="display: none">
        <img src="webresource/images/ajax-loader.gif" />
    </div>

    <div style="display: none">
        <a4j:status onstart="showLoader()" onstop="hideLoader()" />

        <iframe src="#{contextPath}/faces/pages/modules/sourceModified.xhtml" width="0" height="0" />
        <iframe name="hidden" width="0" height="0" />

        <!-- Init RichFaces resources -->
        <rich:popupPanel id="initRfPopup" />
        <rich:calendar id="initRfCalendar" />
        <rich:inputNumberSpinner id="initRfSpinner" />
        <rich:dataTable id="initRfTable" />
        <rich:fileUpload id="initRfUpload" />
        <rich:tree id="initRfTree" />
    </div>

</h:body>
</html>
