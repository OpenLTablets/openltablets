<?xml version="1.0" encoding="UTF-8"?>
<ui:composition
    xmlns:ui="http://java.sun.com/jsf/facelets">

    <div id="designRepo">
        <ui:include src="/pages/modules/repository/tree.xhtml" />
    </div>
    <div id="productionRepo" style="display: none">
        <ui:include src="/pages/modules/repository/productionTree.xhtml" />
    </div>

    <script>
      //<![CDATA[
        function goToRepo(repo, repoHide) {
            $j("#" + repoHide + "RepoLink").addClass("view-header-link-inactive");
            $j("#" + repo + "RepoLink").removeClass("view-header-link-inactive");

            $j("#" + repo + "Repo").show();
            $j("#" + repoHide + "Repo").hide();

            $j("#" + repo + "RepoRefresh").show();
            $j("#" + repoHide + "RepoRefresh").hide();

            initRepoFilter(repo);
        }

        var FILTER_PATTERN_ITEM = "filterPattern";

        function initRepoFilter(repo) {
            var filterPattern = sessionStorage.getItem(FILTER_PATTERN_ITEM);

            if (filterPattern) {
                var filterId = (repo == "design" ? "#nameFilter" : "#prodNameFilter");
                $j(filterId).val(filterPattern);
                filterRepoProjects(repo, filterPattern);
            }
        }

        function filterRepoProjects(repo, pattern) {
            let filterId;
            let clearFilterId;
            if (repo === "design") {
                filterId = "#nameFilter";
                clearFilterId = '#clearFilter';
            } else {
                filterId = "#prodNameFilter";
                clearFilterId = '#clearProdFilter';
            }
            if (pattern && pattern.length) {
                $j(filterId).addClass('withClearButton');
                $j(clearFilterId).removeClass('hidden');
                $j('.filtered-mark').removeClass('hidden');
            } else {
                $j(filterId).removeClass('withClearButton');
                $j(clearFilterId).addClass('hidden');
                $j('.filtered-mark').addClass('hidden');
            }

            sessionStorage.setItem(FILTER_PATTERN_ITEM, pattern);

            const treeId = (repo === "design" ? "#projectTree" : "#prodTree");

            // Show all previously hidden elements
            $j(treeId + " div.rf-tr-nd").each(function () {
                $j(this).show();
            });

            // Filter out projects from tree
            let projects = $j(treeId + " div.rf-tr-nd").filter(function () {
                return $j(this).children().first().hasClass('filter-node');
            });

            projects.each(function() {
                let projectNode = $j(this).find(".rf-trn-lbl").first();
                let projectName = projectNode.clone().children().children().remove().end().end().text();
                $j(this).toggle(projectName.toLowerCase().indexOf(pattern.toLowerCase()) > -1);
            });

            // Filter out projects from table
            let projectsInTable = $j(".filtered-table > tbody > tr");
            projectsInTable.each(function() {
                let projectName = $j(this).find(".project-name-column").text();
                $j(this).toggle(projectName.toLowerCase().indexOf(pattern.toLowerCase()) > -1);
            });

            // Filter out empty groups from tree if they are expanded
            let groups = $j(treeId + " div.rf-tr-nd.rf-tr-nd-exp").filter(function () {
                return $j(this).children().first().hasClass('filter-node-container');
            });

            groups.each(function() {
                let $visibleProjectsInside = $j(this).find("div.rf-tr-nd").filter(function () {
                    return $j(this).is(":visible") && $j(this).children().first().hasClass('filter-node');
                });
                let $collapsedGroupsInside = $j(this).find("div.rf-tr-nd.rf-tr-nd-colps").filter(function () {
                    return $j(this).children().first().hasClass('filter-node-container');
                })
                $j(this).toggle($visibleProjectsInside.length > 0 || $collapsedGroupsInside.length > 0);
            });
        }

        function initFilter() {
            initRepoFilter("design");
        }

        function initProdFilter() {
            initRepoFilter("production");
        }

        function filterProjects(pattern) {
            filterRepoProjects("design", pattern);
        }

        function prodFilterProjects(pattern) {
            filterRepoProjects("production", pattern);
        }

        function clearProjectsFilter() {
            $j("#nameFilter").val('');
            filterProjects('');
        }

        function clearProdProjectsFilter() {
            $j("#prodNameFilter").val('');
            prodFilterProjects('');
        }

        var productionFlag = #{repositorySelectNodeStateHolder.isProductionRepository()};


        function reInitRepoFilter() {
            if (productionFlag) {
                initProdFilter();
            } else {
                initFilter();
            }
        }

        $j(() => {
            reInitRepoFilter();

            if (productionFlag) {
                goToRepo('production', 'design');
            } else {
                goToRepo('design', 'production')
            }
        });

      //]]>
    </script>

</ui:composition>
