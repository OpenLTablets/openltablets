<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd" name="studioCacheManager" updateCheck="false">

    <!--

    DiskStore configuration
    =======================

    The diskStore element is optional. To turn off disk store path creation, comment out the diskStore
    element below.

    Configure it if you have disk persistence enabled for any cache or if you use
    unclustered indexed search.

    If it is not configured, and a cache is created which requires a disk store, a warning will be
     issued and java.io.tmpdir will automatically be used.

    diskStore has only one attribute - "path". It is the path to the directory where
    any required disk files will be created.

    If the path is one of the following Java System Property it is replaced by its value in the
    running VM. For backward compatibility these should be specified without being enclosed in the ${token}
    replacement syntax.

    The following properties are translated:
    * user.home - User's home directory
    * user.dir - User's current working directory
    * java.io.tmpdir - Default temp file path
    * ehcache.disk.store.dir - A system property you would normally specify on the command line
      e.g. java -Dehcache.disk.store.dir=/u01/myapp/diskdir ...

    Subdirectories can be specified below the property e.g. java.io.tmpdir/one


-->
    <diskStore path="java.io.tmpdir/studio-cache"/>

<!--
    Cache configuration
    ===================

    The following attributes are required.

    name:
    Sets the name of the cache. This is used to identify the cache. It must be unique.

    maxEntriesLocalHeap:
    Sets the maximum number of objects that will be held on heap memory.  0 = no limit.

    maxEntriesLocalDisk:
    Sets the maximum number of objects that will be maintained in the DiskStore
    The default value is zero, meaning unlimited.

    eternal:
    Sets whether elements are eternal. If eternal,  timeouts are ignored and the
    element is never expired.

    The following attributes and elements are optional.

    maxEntriesInCache:
    This feature is applicable only to Terracotta distributed caches.
    Sets the maximum number of entries that can be stored in the cluster. 0 = no limit.
    Note that clustered cache will still perform eviction if resource usage requires it.
    This property can be modified dynamically while the cache is operating.

    overflowToOffHeap:
    (boolean) This feature is available only in enterprise versions of Ehcache.
    When set to true, enables the cache to utilize off-heap memory
    storage to improve performance. Off-heap memory is not subject to Java
    GC. The default value is false.

    maxBytesLocalHeap:
    Defines how many bytes the cache may use from the VM's heap. If a CacheManager
    maxBytesLocalHeap has been defined, this Cache's specified amount will be
    subtracted from the CacheManager. Other caches will share the remainder.
    This attribute's values are given as <number>k|K|m|M|g|G for
    kilobytes (k|K), megabytes (m|M), or gigabytes (g|G).
    For example, maxBytesLocalHeap="2g" allots 2 gigabytes of heap memory.
    If you specify a maxBytesLocalHeap, you can't use the maxEntriesLocalHeap attribute.
    maxEntriesLocalHeap can't be used if a CacheManager maxBytesLocalHeap is set.

    Elements put into the cache will be measured in size using net.sf.ehcache.pool.sizeof.SizeOf
    If you wish to ignore some part of the object graph, see net.sf.ehcache.pool.sizeof.annotations.IgnoreSizeOf

    maxBytesLocalOffHeap:
    This feature is available only in enterprise versions of Ehcache.
    Sets the amount of off-heap memory this cache can use, and will reserve.

    This setting will set overflowToOffHeap to true. Set explicitly to false to disable overflow behavior.

    Note that it is recommended to set maxEntriesLocalHeap to at least 100 elements
    when using an off-heap store, otherwise performance will be seriously degraded,
    and a warning will be logged.

    The minimum amount that can be allocated is 128MB. There is no maximum.

    maxBytesLocalDisk:
    As for maxBytesLocalHeap, but specifies the limit of disk storage this cache will ever use.

    timeToIdleSeconds:
    Sets the time to idle for an element before it expires.
    i.e. The maximum amount of time between accesses before an element expires
    Is only used if the element is not eternal.
    Optional attribute. A value of 0 means that an Element can idle for infinity.
    The default value is 0.

    timeToLiveSeconds:
    Sets the time to live for an element before it expires.
    i.e. The maximum time between creation time and when an element expires.
    Is only used if the element is not eternal.
    Optional attribute. A value of 0 means that and Element can live for infinity.
    The default value is 0.

    diskExpiryThreadIntervalSeconds:
    The number of seconds between runs of the disk expiry thread. The default value
    is 120 seconds.

    diskSpoolBufferSizeMB:
    This is the size to allocate the DiskStore for a spool buffer. Writes are made
    to this area and then asynchronously written to disk. The default size is 30MB.
    Each spool buffer is used only by its cache. If you get OutOfMemory errors consider
    lowering this value. To improve DiskStore performance consider increasing it. Trace level
    logging in the DiskStore will show if put back ups are occurring.

    clearOnFlush:
    whether the MemoryStore should be cleared when flush() is called on the cache.
    By default, this is true i.e. the MemoryStore is cleared.

    memoryStoreEvictionPolicy:
    Policy would be enforced upon reaching the maxEntriesLocalHeap limit. Default
    policy is Least Recently Used (specified as LRU). Other policies available -
    First In First Out (specified as FIFO) and Less Frequently Used
    (specified as LFU)

    copyOnRead:
    Whether an Element is copied when being read from a cache.
    By default this is false.

    copyOnWrite:
    Whether an Element is copied when being added to the cache.
    By default this is false.

    Cache persistence is configured through the persistence sub-element.  The attributes of the
    persistence element are:

    strategy:
    Configures the type of persistence provided by the configured cache.  This must be one of the
    following values:

    * localRestartable - Enables the RestartStore and copies all cache entries (on-heap and/or off-heap)
    to disk. This option provides fast restartability with fault tolerant cache persistence on disk.
    It is available for Enterprise Ehcache users only.

    * localTempSwap - Swaps cache entries (on-heap and/or off-heap) to disk when the cache is full.
    "localTempSwap" is not persistent.

    * none - Does not persist cache entries.

    * distributed - Defers to the <terracotta> configuration for persistence settings. This option
    is not applicable for standalone.

    synchronousWrites:
    When set to true write operations on the cache do not return until after the operations data has been
    successfully flushed to the disk storage.  This option is only valid when used with the "localRestartable"
    strategy, and defaults to false.

    The following example configuration shows a cache configured for localTempSwap restartability.

    <cache name="persistentCache" maxEntriesLocalHeap="1000">
        <persistence strategy="localTempSwap"/>
    </cache>

    Cache elements can also contain sub elements which take the same format of a factory class
    and properties. Defined sub-elements are:

    * cacheEventListenerFactory - Enables registration of listeners for cache events, such as
      put, remove, update, and expire.

    * bootstrapCacheLoaderFactory - Specifies a BootstrapCacheLoader, which is called by a
      cache on initialisation to prepopulate itself.

    * cacheExtensionFactory - Specifies a CacheExtension, a generic mechanism to tie a class
      which holds a reference to a cache to the cache lifecycle.

    * cacheExceptionHandlerFactory - Specifies a CacheExceptionHandler, which is called when
      cache exceptions occur.

    * cacheLoaderFactory - Specifies a CacheLoader, which can be used both asynchronously and
      synchronously to load objects into a cache. More than one cacheLoaderFactory element
      can be added, in which case the loaders form a chain which are executed in order. If a
      loader returns null, the next in chain is called.

    * copyStrategy - Specifies a fully qualified class which implements
      net.sf.ehcache.store.compound.CopyStrategy. This strategy will be used for copyOnRead
      and copyOnWrite in place of the default which is serialization.

    Example of cache level resource tuning:
    <cache name="memBound" maxBytesLocalHeap="100m" maxBytesLocalOffHeap="4g" maxBytesLocalDisk="200g" />


    Cache Event Listeners
    +++++++++++++++++++++

    All cacheEventListenerFactory elements can take an optional property listenFor that describes
    which events will be delivered in a clustered environment.  The listenFor attribute has the
    following allowed values:

    * all - the default is to deliver all local and remote events
    * local - deliver only events originating in the current node
    * remote - deliver only events originating in other nodes

    Example of setting up a logging listener for local cache events:

    <cacheEventListenerFactory class="my.company.log.CacheLogger"
        listenFor="local" />


    Search
    ++++++

    A <cache> can be made searchable by adding a <searchable/> sub-element. By default the keys
    and value objects of elements put into the cache will be attributes against which
    queries can be expressed.

    <cache>
        <searchable/>
    </cache>


    An "attribute" of the cache elements can also be defined to be searchable. In the example below
    an attribute with the name "age" will be available for use in queries. The value for the "age"
    attribute will be computed by calling the method "getAge()" on the value object of each element
    in the cache. See net.sf.ehcache.search.attribute.ReflectionAttributeExtractor for the format of
    attribute expressions. Attribute values must also conform to the set of types documented in the
    net.sf.ehcache.search.attribute.AttributeExtractor interface

    <cache>
        <searchable>
            <searchAttribute name="age" expression="value.getAge()"/>
        </searchable>
    </cache>


    Attributes may also be defined using a JavaBean style. With the following attribute declaration
    a public method getAge() will be expected to be found on either the key or value for cache elements

    <cache>
        <searchable>
            <searchAttribute name="age"/>
        </searchable>
    </cache>

    In more complex situations you can create your own attribute extractor by implementing the
    AttributeExtractor interface. Providing your extractor class is shown in the following example:

    <cache>
        <searchable>
            <searchAttribute name="age" class="com.example.MyAttributeExtractor"/>
        </searchable>
    </cache>

    Use properties to pass state to your attribute extractor if needed. Your implementation must provide
    a public constructor that takes a single java.util.Properties instance

    <cache>
        <searchable>
            <searchAttribute name="age" class="com.example.MyAttributeExtractor" properties="foo=1,bar=2"/>
        </searchable>
    </cache>


    RMI Cache Replication
    +++++++++++++++++++++

    Each cache that will be distributed needs to set a cache event listener which replicates
    messages to the other CacheManager peers. For the built-in RMI implementation this is done
    by adding a cacheEventListenerFactory element of type RMICacheReplicatorFactory to each
    distributed cache's configuration as per the following example:

    <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
         properties="replicateAsynchronously=true,
         replicatePuts=true,
         replicatePutsViaCopy=false,
         replicateUpdates=true,
         replicateUpdatesViaCopy=true,
         replicateRemovals=true,
         asynchronousReplicationIntervalMillis=<number of milliseconds>,
         asynchronousReplicationMaximumBatchSize=<number of operations>"
         propertySeparator="," />

    The RMICacheReplicatorFactory recognises the following properties:

    * replicatePuts=true|false - whether new elements placed in a cache are
      replicated to others. Defaults to true.

    * replicatePutsViaCopy=true|false - whether the new elements are
      copied to other caches (true), or whether a remove message is sent. Defaults to true.

    * replicateUpdates=true|false - whether new elements which override an
      element already existing with the same key are replicated. Defaults to true.

    * replicateRemovals=true - whether element removals are replicated. Defaults to true.

    * replicateAsynchronously=true | false - whether replications are
      asynchronous (true) or synchronous (false). Defaults to true.

    * replicateUpdatesViaCopy=true | false - whether the new elements are
      copied to other caches (true), or whether a remove message is sent. Defaults to true.

    * asynchronousReplicationIntervalMillis=<number of milliseconds> - The asynchronous
      replicator runs at a set interval of milliseconds. The default is 1000. The minimum
      is 10. This property is only applicable if replicateAsynchronously=true

    * asynchronousReplicationMaximumBatchSize=<number of operations> - The maximum
      number of operations that will be batch within a single RMI message.  The default
      is 1000. This property is only applicable if replicateAsynchronously=true

    JGroups Replication
    +++++++++++++++++++

    For the Jgroups replication this is done with:
    <cacheEventListenerFactory class="net.sf.ehcache.distribution.jgroups.JGroupsCacheReplicatorFactory"
                            properties="replicateAsynchronously=true, replicatePuts=true,
               replicateUpdates=true, replicateUpdatesViaCopy=false,
               replicateRemovals=true,asynchronousReplicationIntervalMillis=1000"/>
    This listener supports the same properties as the RMICacheReplicationFactory.


    JMS Replication
    +++++++++++++++

    For JMS-based replication this is done with:
    <cacheEventListenerFactory
          class="net.sf.ehcache.distribution.jms.JMSCacheReplicatorFactory"
          properties="replicateAsynchronously=true,
                       replicatePuts=true,
                       replicateUpdates=true,
                       replicateUpdatesViaCopy=true,
                       replicateRemovals=true,
                       asynchronousReplicationIntervalMillis=1000"
           propertySeparator=","/>

    This listener supports the same properties as the RMICacheReplicationFactory.

    Cluster Bootstrapping
    +++++++++++++++++++++

    Bootstrapping a cluster may use a different mechanism to replication. e.g you can mix
    JMS replication with bootstrap via RMI - just make sure you have the cacheManagerPeerProviderFactory
    and cacheManagerPeerListenerFactory configured.

    There are two bootstrapping mechanisms: RMI and JGroups.

    RMI Bootstrap

    The RMIBootstrapCacheLoader bootstraps caches in clusters where RMICacheReplicators are
    used. It is configured as per the following example:

    <bootstrapCacheLoaderFactory
        class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"
        properties="bootstrapAsynchronously=true, maximumChunkSizeBytes=5000000"
        propertySeparator="," />

    The RMIBootstrapCacheLoaderFactory recognises the following optional properties:

    * bootstrapAsynchronously=true|false - whether the bootstrap happens in the background
      after the cache has started. If false, bootstrapping must complete before the cache is
      made available. The default value is true.

    * maximumChunkSizeBytes=<integer> - Caches can potentially be very large, larger than the
      memory limits of the VM. This property allows the bootstraper to fetched elements in
      chunks. The default chunk size is 5000000 (5MB).
-->

    <!-- Example configuration for a cache that can use 1000Mb in local heap
        memory with maxDepth="25000" sizeOfPolicy: <cache maxBytesLocalHeap="1000M"
        name="modulesCache" eternal="true" overflowToDisk="false" diskPersistent="false"
        memoryStoreEvictionPolicy="LRU"> <sizeOfPolicy maxDepth="25000"/> </cache> -->


<!--
    Default Cache configuration. These settings will be applied to caches
    created programmatically using CacheManager.add(String cacheName).
    This element is optional, and using CacheManager.add(String cacheName) when
    its not present will throw CacheException

    The defaultCache has an implicit name "default" which is a reserved cache name.
-->
    <defaultCache maxEntriesLocalHeap="10000" eternal="false"
                  timeToIdleSeconds="120" timeToLiveSeconds="0" overflowToDisk="true"
                  maxElementsOnDisk="10000000" diskPersistent="false"
                  diskExpiryThreadIntervalSeconds="120" memoryStoreEvictionPolicy="LRU"/>

</ehcache>

