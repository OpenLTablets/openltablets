webstudio.bcrypt.strength = 10
webstudio.analytics = false


# System properties
custom.spreadsheet.type = true
dispatching.mode = java
dispatching.validation=true

user.mode = single

test.run.parallel = true
test.run.thread.count = 4

compile.auto = true

# Encoding that can be used to uncompress zip file if UTF-8 isn't applicable.
# Note: often in Windows zips are compressed using DOS charset depending on system locale, not Windows ANSI charset.
zip.charsets.support = IBM866, IBM437, IBM850, windows-1252, windows-1251, windows-1250, ISO-8859-1

# Common properties

user.workspace.home = ${openl.home}/user-workspace
user.settings.home = ${openl.home}/user-settings

project.history.home = ${openl.home}/project-history
project.history.count = 0
project.history.unlimited = true

update.system.properties = false
data.format.date = MM/dd/yyyy

# Compatibility properties
default.openl.compatibility.version =

### DB properties
db.url = jdbc:h2:${openl.home}/users-db/db;AUTO_SERVER=TRUE
db.user =
db.password =
###

### User settings default values
rules.tree.view = type

table.view = developer
table.formulas.show = false

test.export.to.excel = false
test.tests.perpage = 5
test.failures.only = false
test.failures.pertest = 5
test.result.complex.show = false

#Define default module mode in WebStudio: SINGLE, MULTI, SINGLE_ONLY, MULTI_ONLY
#SINGLY_ONLY and MULTI_ONLY disable ability to choose module mode in UI
#MULTI value is used by default
project.module.default.mode = MULTI
###

### Diff manager properties
# Comparison cleanup time after inactivity period (in seconds)
diff-manager.inactive-cleanup-period = 600

### Design Repository properties

repository.design.name = Design

# Which class should we instantiate in RepositoryFactory?
repository.design.factory = org.openl.rules.repository.git.GitRepository
# Repository URI
repository.design.uri =

repository.design.login =
repository.design.password =

# The path in repository where Projects are stored. Must end with "/".
repository.design.base.path = DESIGN/rules/

# Regexp to validate comments. Can be empty. In this case comment will not be validated.
repository.design.comment-validation-pattern =
# Message shown when comment isn't valid.
repository.design.invalid-comment-message = Invalid comment: Comment doesn't match validation pattern


# If true, all projects will be stored in the folder configured in "repository.design.base.path" property.
# If false, projects can be stored in any folder.
repository.design.folder-structure.flat = true

# The file in repository containing info related to project names and paths.
# Used if repository.design.folder-structure.flat == false.
# The file should have such structure:
#   project.1.name = MyProject
#   project.1.path = mysubmodule1/myproject/src/main/openl
#   project.2.name = Other Project
#   project.2.path = mysubmodule2/other-project/src/main/openl
repository.design.folder-structure.configuration = openl-projects.properties

### AWS S3 Specific
# A logical unit of storage in AWS object storage service. Globally unique.
repository.design.bucket-name =
# AWS Region that is geographically close to you to optimize latency, minimize costs etc.
repository.design.region-name =
# Alphanumeric text string that is used to identify the user who owns the account.
repository.design.access-key =
# Plays the role of a password for a given access-key.
repository.design.secret-key =
###

### Git Specific
# Local path for Git repository.
repository.design.local-repository-path = ${openl.home}/design-repository
# The branch where the changes will be comitted.
repository.design.branch = master
# Prefix for automatically generated tag which will be added to every commit.
repository.design.tag-prefix =
# Comment message template for Git commits.
# - {username} is replaced by Webstudio username.
# - {user-message} is replaced by user defined commit message. This part of commit message is mandatory.
# - {commit-type} is a system property for commits to recognize commit type from a message. This part of commit message is mandatory.
repository.design.comment-template = {user-message} Author: {username}. Type: {commit-type}.
# New branch pattern. Use {0} for project name, {1} for username, {2} for current date.
# Only latin letters, numbers, '_', '-' and '/' are allowed.
repository.design.new-branch-pattern = WebStudio/{0}/{1}/{2}
# Folder where git-specific internal files will be stored
repository.design.git-settings-path = ${openl.home}/git-settings/
# Committer's display name. If null, user name will be WebStudio user name.
repository.design.user-display-name =
# Committer's email. If null, email will be empty.
repository.design.user-email =
# Repository connection timeout in seconds. Must be greater than zero.
repository.design.connection-timeout = 60
###

### AWS S3 and Git Specific
# Repository changes check interval in seconds. Must be greater than 0.
repository.design.listener-timer-period = 10
###

### User message defaults
repository.design.comment-template.use-custom-comments = false
repository.design.comment-template.user-message.default.save = Project {project-name} is saved.
repository.design.comment-template.user-message.default.create = Project {project-name} is created.
repository.design.comment-template.user-message.default.archive = Project {project-name} is archived.
repository.design.comment-template.user-message.default.restore = Project {project-name} is restored.
repository.design.comment-template.user-message.default.erase = Project {project-name} is erased.
repository.design.comment-template.user-message.default.copied-from = Copied from: {project-name}.
repository.design.comment-template.user-message.default.restored-from = Restored from revision #{revision}.
###

### Deploy Configuration Repository properties
# If true, Deploy Config Repository use own settings. If false, Design Repository is used to store Deploy Configurations.
repository.deploy-config.separate-repository = false

repository.deploy-config.name = Deploy Configuration

# Which class should we instantiate in RepositoryFactory?
repository.deploy-config.factory = org.openl.rules.repository.git.GitRepository

# Deploy config repository URI
repository.deploy-config.uri =

repository.deploy-config.login =
repository.deploy-config.password =

# The path in repository where Deploy Configurations are stored. Must end with "/".
repository.deploy-config.base.path = DESIGN/deployments/

# Regexp to validate comments. Can be empty. In this case comment will not be validated.
repository.deploy-config.comment-validation-pattern =
# Message shown when comment isn't valid.
repository.deploy-config.invalid-comment-message = Invalid comment: Comment doesn't match validation pattern

# If true, all projects will be stored in the folder configured in "repository.deploy-config.base.path" property.
# If false, projects can be stored in any folder.
repository.deploy-config.folder-structure.flat = true

# The file in repository containing info related to project names and paths.
# Used if repository.deploy-config.folder-structure.flat == false.
# The file should have such structure:
#   project.1.name = MyProject
#   project.1.path = mysubmodule1/myproject/src/main/openl
#   project.2.name = Other Project
#   project.2.path = mysubmodule2/other-project/src/main/openl

repository.deploy-config.folder-structure.configuration = openl-deploy-configs.properties

### AWS S3 Specific
# A logical unit of storage in AWS object storage service. Globally unique.
repository.deploy-config.bucket-name =
# AWS Region that is geographically close to you to optimize latency, minimize costs etc.
repository.deploy-config.region-name =
# Alphanumeric text string that is used to identify the user who owns the account.
repository.deploy-config.access-key =
# Plays the role of a password for a given access-key.
repository.deploy-config.secret-key =
###

### Git Specific
# Local path for Git repository.
repository.deploy-config.local-repository-path = ${openl.home}/deploy-config-repository
# The branch where the changes will be comitted.
repository.deploy-config.branch = master
# Prefix for automatically generated tag which will be added to every commit.
repository.deploy-config.tag-prefix =
# Comment message template for Git commits.
# - {username} is replaced by Webstudio username.
# - {user-message} is replaced by user defined commit message. This part of commit message is mandatory.
# - {commit-type} is a system property for commits to recognize commit type from a message. This part of commit message is mandatory.
repository.deploy-config.comment-template = {user-message} Author: {username}. Type: {commit-type}.
# Committer's display name. If null, user name will be WebStudio user name.
repository.deploy-config.user-display-name =
# Committer's email. If null, email will be empty.
repository.deploy-config.user-email =
# Repository connection timeout in seconds. Must be greater than zero.
repository.deploy-config.connection-timeout = 60
###

### AWS S3 and Git Specific
# Repository changes check interval in seconds. Must be greater than 0.
repository.deploy-config.listener-timer-period = 10
###

### User message defaults
repository.deploy-config.comment-template.use-custom-comments = false
repository.deploy-config.comment-template.user-message.default.save = Deploy configuration {project-name} is saved.
repository.deploy-config.comment-template.user-message.default.create = Deploy configuration {project-name} is created.
repository.deploy-config.comment-template.user-message.default.archive = Deploy configuration {project-name} is archived.
repository.deploy-config.comment-template.user-message.default.restore = Deploy configuration {project-name} is restored.
repository.deploy-config.comment-template.user-message.default.erase = Deploy configuration {project-name} is erased.
repository.deploy-config.comment-template.user-message.default.copied-from = Copied from: {project-name}.
repository.deploy-config.comment-template.user-message.default.restored-from = Restored from revision #{revision}.
###

### Central Authentication Service (CAS) settings.
# WebStudio server url.
security.cas.app-url = https://localhost:8443/webstudio
# CAS server url.
security.cas.cas-server-url-prefix = https://localhost:9443/cas
# CAS 3.0 protocol validator prefix contains "/p3" in url (and is able to retrieve attributes). If CAS 2.0 is used, remove "/p3".
security.cas.cas-server-ticket-validator-prefix = ${security.cas.cas-server-url-prefix}/p3
# Default Group will be assigned to the users signing in first time. Can be empty.
security.cas.default-group = Viewers
# CAS attribute for First Name. Keep it empty if CAS server doesn't return this attribute.
security.cas.attribute.first-name =
# CAS attribute for Second Name. Keep it empty if CAS server doesn't return this attribute.
security.cas.attribute.last-name =
# CAS attribute for Groups. Keep it empty if CAS server doesn't return this attribute or groups are managed in WebStudio.
security.cas.attribute.groups =

### SAML settings.
# WebStudio server url.
security.saml.app-url = http://localhost:8080/webstudio
# SAML server metadata url.
security.saml.saml-server-metadata-url = http://localhost:9080/idp-meta.xml
# The time, in milliseconds, to wait for the metadata server to respond
security.saml.request-timeout = 15000
# File pointing to the JKS keystore
security.saml.keystore-file-path = classpath:security/keystore.jks
# Password to access the keystore
security.saml.keystore-password = changeit
# Service Provider alias for key in the keystore
security.saml.keystore-sp-alias = webstudio
# Password to access Service Provider key
security.saml.keystore-sp-password = ${security.saml.keystore-password}
# Default Group will be assigned to the users signing in first time. Can be empty.
security.saml.default-group = Viewers
# SAML attribute for Username. Keep it empty if SAML server doesn't return this attribute or if default algorithm for username retrieval must be used.
security.saml.attribute.username =
# SAML attribute for First Name. Keep it empty if SAML server doesn't return this attribute.
security.saml.attribute.first-name =
# SAML attribute for Second Name. Keep it empty if SAML server doesn't return this attribute.
security.saml.attribute.last-name =
# SAML attribute for Groups. Keep it empty if SAML server doesn't return this attribute or groups are managed in WebStudio.
security.saml.attribute.groups =
# Comma separated list of authentication contexts IDP is allowed to use when authenticating user. Can be empty.
security.saml.authentication-contexts = urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport
# Sets binding to be used for for sending SAML message to IDP. Can be empty. Possible values:
# urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST, urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect,
# urn:oasis:names:tc:SAML:2.0:bindings:PAOS, urn:oasis:names:tc:SAML:2.0:profiles:holder-of-key:SSO:browser, etc
security.saml.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect
# Set true for local logout (logging out only from WebStudio) and false for global logout (logging out from all services using this IdP)
security.saml.local-logout = false

### Active Directory (AD) settings.
security.ad.domain=localhost
security.ad.server-url=ldap://localhost:3268
security.ad.search-filter=(&(objectClass=user)(userPrincipalName={0}))
security.ad.groups-are-managed-in-studio=true
security.ad.default-group=Viewers
#nested groups + primary group filter
security.ad.primary-group-filter=(&(objectClass=group)(|(member:1.2.840.113556.1.4.1941:={0})(objectSid={1})))
#nested groups without primary group filter
security.ad.group-filter=(&(objectClass=group)(member:1.2.840.113556.1.4.1941:={0}))


# Production Repository properties
production-repository-configs = production

repository.production.name = Deployment

# In case of DB via JDBC this property defines how to access it
repository.production.factory = org.openl.rules.repository.db.JdbcDBRepositoryFactory
repository.production.uri = jdbc:h2:mem:repo;DB_CLOSE_DELAY=-1

# In case of DB via JNDI this property defines how to access it
#repository.production.factory = org.openl.rules.repository.factories.JndiDBRepositoryFactory
#repository.production.uri = java:comp/env/jdbc/deploymentDB

#Login and password for remote repository
repository.production.login =
repository.production.password =

### AWS S3 Specific
# A logical unit of storage in AWS object storage service. Globally unique.
repository.production.bucket-name =
# AWS Region that is geographically close to you to optimize latency, minimize costs etc.
repository.production.region-name =
# Alphanumeric text string that is used to identify the user who owns the account.
repository.production.access-key =
# Plays the role of a password for a given access-key.
repository.production.secret-key =
###

### Git Specific
# Local path for Git repository.
repository.production.local-repository-path = ${openl.home}/production-repository
# The branch where the changes will be comitted.
repository.production.branch = master
# Prefix for automatically generated tag which will be added to every commit.
repository.production.tag-prefix =
# Comment template for commits. Use {username} for predefined OpenL-specific Commit Type used by OpenL,
# {user-message} for meaningful message describing commit, {username} for commit author.
repository.production.comment-template = {user-message} Author: {username}. Commit type: {commit-type}.
# Committer's display name. If null, user name will be WebStudio user name.
repository.production.user-display-name =
# Committer's email. If null, email will be empty.
repository.production.user-email =
# Repository connection timeout in seconds. Must be greater than zero.
repository.production.connection-timeout = 60
###
### AWS S3 and Git Specific
# Repository changes check interval in seconds. Must be greater than 0.
repository.production.listener-timer-period=10
###
# The path in repository where Deployments are stored. Must end with "/".
repository.production.base.path=deploy/
# Set "{prefix}.version-in-deployment-name = true" for old implementation
repository.production.version-in-deployment-name=false