require 'rake'

OPENL_VERSION = '5.1.1'


LOCATIONS = [".."]
LOCATIONS << "E:/Projects/SVN/DEV/branches/iteration2_initial"
LOCATIONS << "E:/Projects/SVN/WSFrontend/branches/iteration2_initial"



class Replacement
  attr_reader :filePattern, :regex, :replacement

  def initialize(filePattern, regex, replacement)
    @filePattern = filePattern
    @regex = regex
    @replacement = replacement
  end
end

REPLACEMENTS = [
        Replacement.new("*feature*/feature.xml", /version="[^"]*"/, %Q{version="#{OPENL_VERSION}"}),
        Replacement.new("*/META-INF/MANIFEST.MF", /Bundle-Version: .*/, %Q{Bundle-Version: #{OPENL_VERSION}})
]


task :default => :replace

task :replace do
  for loc in LOCATIONS do
    puts "-----starting processing location #{loc}"
    REPLACEMENTS.each do |r|
      Dir.glob("#{loc}/#{r.filePattern}").each {|f| replaceOnFile f, r.regex, r.replacement}
    end
  end
end

task :replace => :replaceSite

task :replaceSite do
  replaceOnFile("site.xml", /<feature url="features.*/,
%Q{<feature url="features/org.openl.rules.all.eclipse.feature_#{OPENL_VERSION}.jar" id="org.openl.rules.all.eclipse.feature" version="#{OPENL_VERSION}">}
)
end


require 'fileutils'
require 'pathname'

def replaceOnFile(file, regex, replacement)
  tmpFile = file + '.bak.tmp'

  begin
    File.open(tmpFile, "w") do |tmp|
      File.open(file, "r") do |f|
        f.each  do |line|
          l2 = (f.lineno == 1) && (line =~ /^\s*<\?xml/) ? line : line.gsub(regex, replacement)
          puts "#{Pathname.new(file).realpath.to_s}: changed line #{f.lineno}\n OLD:#{line.chomp}\n NEW:#{l2.chomp}" if line != l2
          tmp.puts l2
        end
      end
    end
    FileUtils.mv(tmpFile, file)
  rescue Exception => e
    puts "ERROR!!!: #{e}"
    FileUtils.remove_file(tmpFile, true)
  end
end
