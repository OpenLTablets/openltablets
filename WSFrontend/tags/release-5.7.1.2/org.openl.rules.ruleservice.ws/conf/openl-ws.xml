<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:simple="http://cxf.apache.org/simple"
	xmlns:soap="http://cxf.apache.org/bindings/soap"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
http://cxf.apache.org/bindings/soap http://cxf.apache.org/schemas/configuration/soap.xsd
http://cxf.apache.org/simple http://cxf.apache.org/schemas/simple.xsd">
	<!--
		Default configuration used in demo. It exposes all rules projects from
		JCR repository on jetty server on "http://localhost:9000/..."
	-->

	<!--
		Data binding type in WebServices(set it to the "serverPrototype" bean)
	-->
	<bean id="binding" class="org.apache.cxf.aegis.databinding.AegisDatabinding" />

	<!-- Main description for the one WebService.-->
	<!--
		All configurations for server (like a data binding type and
		interceptors) are represented there. ServerFactoryBean configuration
		is similar to a CXF simple frontend configuration(see
		http://cxf.apache.org/docs/simple-frontend-configuration.html) but
		without namespace "simple".
	-->
	<bean id="serverPrototype" class="org.apache.cxf.frontend.ServerFactoryBean"
		scope="prototype">
		<property name="dataBinding" ref="binding" />
	</bean>
	
	<!--
		Prototypes factory. It will create new server prototype for each new
		WebService.
	-->
	<bean id="serverPrototypeFactory"
		class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
		<property name="targetBeanName">
			<idref local="serverPrototype" />
		</property>
	</bean>

	<!-- JCR repository client (just for loader) -->
	<bean id="rulesJcrClient"
		class="org.openl.rules.workspace.production.client.JcrRulesClient"/>
		
	<!-- Any implementation of interface
		"org.openl.rules.ruleservice.loader.DeploymentsToLoadManager".
		 Selects deployments to load.-->
	<bean id="deploymentsHandlerBean"
		class="org.openl.rules.ruleservice.loader.LatestDeploymentsToLoadManager"/>
		
	<!--
		Any implementation of interface
		"org.openl.rules.ruleservice.loader.RulesLoader". Loads projects from
		any source and says about that to the listener
	-->
	<bean id="loaderBean" class="org.openl.rules.ruleservice.loader.JcrRulesLoader">
		<constructor-arg ref="rulesJcrClient" />
		<property name="deploymentsToLoadManager" ref="deploymentsHandlerBean" />
	</bean>

	<!--
		Any implementation of interface
		"org.openl.rules.ruleservice.publish.DeploymentAdmin"
	-->
	<bean id="deploymentAdmin"
		class="org.openl.rules.ruleservice.publish.WebServicesDeployAdmin">
		<!--
			Base address for a jetty server. Result address of WebServices will
			be: "<baseAddress><deploymentName>/<ruleWrapperName>"
		-->
		<property name="baseAddress" value="http://localhost:9000/" />

		<!--
			Base address for a tomcat war. Result address of WebServices will be:
			"http://localhost:<port>/<war_name><baseAddress><deploymentName>/<ruleWrapperName>"
		-->
		<!--
		<property name="baseAddress" value="/" />
		-->
		<property name="serverFactory" ref="serverPrototypeFactory" />
		<property name="provideRuntimeContext" value="false" />
	</bean>
	
	<!--
		Any implementation of interface
		"org.openl.rules.ruleservice.publish.ServiceNameBuilder".
		Builds names for Web Services by deployment info.
	-->
	<bean id="serviceNameBuilderBean"
		class="org.openl.rules.ruleservice.publish.SimpleServiceNameBuilder" />
		
	<!-- Rules publisher that will expose all deployments -->
	<bean id="publisherBean" class="org.openl.rules.ruleservice.publish.RulesPublisher">
		<property name="deployAdmin" ref="deploymentAdmin" />
		<property name="serviceNameBuilder" ref="serviceNameBuilderBean" />
	</bean>

	<!--
		Rule WebService description. Loader(that handles loading deployments)
		and publisher(that exposes loaded deployments).
	-->
	<bean id="ruleService" class="org.openl.rules.ruleservice.RuleService">
		<property name="loader" ref="loaderBean" />
		<property name="publisher" ref="publisherBean" />
	</bean>
</beans>
