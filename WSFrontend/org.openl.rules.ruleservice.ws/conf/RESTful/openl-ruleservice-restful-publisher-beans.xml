<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />

	<!-- Data binding type in WebServices(set it to the "serverPrototype" bean) -->
	<!-- Aegis databinding post processor for type mapping customization of 
		internal OpenL classes. -->
<!-- 
	<bean id="rootClassNamesBindingFactoryBean"
		class="org.openl.rules.ruleservice.databinding.RootClassNamesBindingFactoryBean">
		<property name="rootClassNames" value="${ruleservice.binding.rootClassNames}" />
	</bean>
	<bean id="dataBinding"
		class="org.openl.rules.ruleservice.databinding.AegisDatabindingConfigurableFactoryBean">
		<property name="writeXsiTypes" value="true" />
		<property name="overrideTypes" ref="rootClassNamesBindingFactoryBean" />
	</bean>
 -->
	<bean id="RESTServicesDataBinding" class="org.apache.cxf.jaxb.JAXBDataBinding"/>

	<!-- <bean id="dataBinding" class="org.apache.cxf.jaxb.JAXBDataBinding" 
		scope="prototype"> <property name="contextProperties"> <map> <entry> <key> 
		<util:constant static-field="com.sun.xml.bind.api.JAXBRIContext.ANNOTATION_READER" 
		/> </key> <bean class="org.jvnet.annox.xml.bind.AnnoxAnnotationReader" /> 
		</entry> </map> </property> </bean> -->


	<!-- Main description for the one RESTfulService  -->
	<!-- All configurations for server (like a data binding type and interceptors) 
		are represented there. ServerFactoryBean configuration is similar to a CXF 
		simple frontend configuration(see http://cxf.apache.org/docs/simple-frontend-configuration.html) 
		but without namespace "simple". -->

	<bean id="RESTServicesLoggingFeature" class="org.openl.rules.ruleservice.logging.LoggingFeature">
		<property name="loggingEnabled" value="${ruleservice.logging.enabled}" />
	</bean>

	<bean id="jaxrsProvider" class="org.apache.cxf.jaxrs.provider.JSONProvider"/>

	<bean id="RESTServicesServerPrototype" class="org.apache.cxf.jaxrs.JAXRSServerFactoryBean"
		scope="prototype">
		<property name="dataBinding" ref="RESTServicesDataBinding" />
		<property name="features">
			<list>
				<!-- Comment/Uncomment following block for use/unuse logging feature. 
					It can increase performance if logging isn't used. -->
				<ref bean="RESTServicesLoggingFeature" />
			</list>
		</property>
		<property name="provider" ref="jaxrsProvider"/>
	</bean>

	<!-- Prototypes factory. It will create new server prototype for each new 
		WebService. -->
	<bean id="RESTServicesServerPrototypeFactory"
		class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
		<property name="targetBeanName">
			<idref bean="RESTServicesServerPrototype" />
		</property>
	</bean>

	<!-- Initializes OpenL Engine instances according to web services configuration 
		description and calls RuleServicePublisher to expose corresponding web service -->
	<!-- Exposes web services. -->
	<bean id="RESTServicesRuleServicePublisher"
		class="org.openl.rules.ruleservice.publish.RESTServicesRuleServicePublisher">
		<property name="serverFactory" ref="RESTServicesServerPrototypeFactory" />
		<property name="baseAddress" value="${ruleservice.baseAddress}" />
	</bean>
</beans>
